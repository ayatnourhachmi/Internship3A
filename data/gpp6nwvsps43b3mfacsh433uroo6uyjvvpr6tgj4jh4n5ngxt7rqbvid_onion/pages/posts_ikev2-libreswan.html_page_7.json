{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   IKEv2 with Libreswan\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     IKEv2 with Libreswan\n    </h1>\n    <p>\n     IKEv2 is defined by the Internet Engineering Task Force standard\n     <a href=\"https://tools.ietf.org/html/rfc7296\" target=\"_blank\">\n      RFC 7296\n     </a>\n     . It uses fixed port numbers. It is therefore easily blocked by censors. Nevertheless, it may work in some countries.\n    </p>\n    <p>\n     This article shows you how to create an IKEv2 server using Libreswan on CentOS 8. Note that CentOS 8 reaches end-of-life on December 31, 2021.\n    </p>\n    <p>\n     In the examples we give, the client is at IP address\n     <code>\n      xx.xx.xx.xx\n     </code>\n     , and the server is at IP address\n     <code>\n      yy.yy.yy.yy\n     </code>\n     . Wherever you see these values in the examples, you will need to change them to match your actual IP addresses. If you do not know your workstation’s IP address, you can determine it by opening a browser and visiting\n     <a href=\"https://www.ipchicken.com\" target=\"_blank\">\n      IPchicken.com\n     </a>\n     .\n    </p>\n    <p>\n     We will also give instructions for the example of a Windows client device.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Install and Configure Firewall\n    </h3>\n    <p>\n     We begin by installing a firewall and configuring it to accept packets using AH protocol and ESP protocol, plus 500/udp and 4500/udp, which will be used with clients behind Network Address Translation. We also masquerade outgoing IP addresses. Issue the commands that follow:\n    </p>\n    <blockquote>\n     <code>\n      yum update -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      yum install firewalld -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl enable firewalld\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start firewalld\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --add-service=ipsec\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --add-masquerade\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --runtime-to-permanent\n     </code>\n    </blockquote>\n    <p>\n     For better security, restrict port 22 access to trusted IP addresses only. For example, if you always log in from IP address\n     <code>\n      xx.xx.xx.xx\n     </code>\n     , make that the only IP address that will be trusted for SSH access:\n    </p>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=trusted --add-service=ssh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=trusted --add-source=xx.xx.xx.xx/32\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=public --remove-service=ssh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=public --remove-service=cockpit\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --runtime-to-permanent\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Allow Forwarding\n    </h3>\n    <p>\n     Now enable packet forwarding in the Linux kernel. Create a new configuration file in\n     <code>\n      /usr/lib/sysctl.d\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/lib/sysctl.d/40-ipv4-forward.conf\n     </code>\n    </blockquote>\n    <p>\n     Insert a single line:\n    </p>\n    <blockquote>\n     <code>\n      net.ipv4.ip_forward=1\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Make this change effective immediately.:\n    </p>\n    <blockquote>\n     <code>\n      sysctl -p /usr/lib/sysctl.d/40-ipv4-forward.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Install Packages\n    </h3>\n    <p>\n     Install LibreSwan by entering the command:\n    </p>\n    <blockquote>\n     <code>\n      yum install libreswan -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Initialize Public Key Infrastructure\n    </h3>\n    <p>\n     Create fresh Network Security Services databases by entering the command:\n    </p>\n    <blockquote>\n     <code>\n      ipsec initnss\n     </code>\n    </blockquote>\n    <p>\n     The databases\n     <code>\n      cert9.db\n     </code>\n     and\n     <code>\n      key4.db\n     </code>\n     are created in the directory\n     <code>\n      /etc/ipsec.d\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Create Certificate Authority Certificate\n    </h3>\n    <p>\n     We will create a self-signed Certificate Authority (CA) certificate with a CA basic constraints extension. Issue the\n     <code>\n      certutil\n     </code>\n     command that follows, replacing\n     <code>\n      Example CA\n     </code>\n     and\n     <code>\n      Example\n     </code>\n     with your own choices for values:\n    </p>\n    <blockquote>\n     <code>\n      certutil -S -x -n \"Example CA\" -s \"O=Example,CN=Example CA\" -k rsa -g 4096 -v 120 -d sql:/etc/ipsec.d -t \"CT,,\" -2\n     </code>\n    </blockquote>\n    <p>\n     When prompted, generate randomness by typing on your keyboard at irregular intervals. Continue typing until the progress bar gets to the end. Then you are prompted to press\n     <strong>\n      Enter\n     </strong>\n     .\n    </p>\n    <p>\n     When asked if this is a CA certificate, put\n     <code>\n      y\n     </code>\n     for yes. When asked for a path length constraint, press\n     <strong>\n      Enter\n     </strong>\n     . When asked if this is a critical extension, put\n     <code>\n      n\n     </code>\n     for no.\n    </p>\n    <p>\n     If you want to check that your new certificate is in the database, issue the command:\n    </p>\n    <blockquote>\n     <code>\n      certutil -L -d sql:/etc/ipsec.d\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Create Server Certificate\n    </h3>\n    <p>\n     Generate the server certificate with appropriate as follows. Issue the\n     <code>\n      certutil\n     </code>\n     command, replacing\n     <code>\n      Example CA\n     </code>\n     and\n     <code>\n      Example\n     </code>\n     with your own choices for values. Also replace\n     <code>\n      yy.yy.yy.yy\n     </code>\n     by your server’s actual IP address.\n    </p>\n    <blockquote>\n     <code>\n      certutil -S -c \"Example CA\" -n \"yy.yy.yy.yy\" -s \"O=Example,CN=yy.yy.yy.yy\" -k rsa -g 4096 -v 12 -d sql:/etc/ipsec.d -t \",,\" -1 -6 -8 \"yy.yy.yy.yy\"\n     </code>\n    </blockquote>\n    <p>\n     Again, a random seed must be generated for the creation of your key. Do some random typing until the process meter is full. Then you are prompted to press\n     <strong>\n      Enter\n     </strong>\n     .\n    </p>\n    <p>\n     When you are asked about the usage, enter\n     <code>\n      0\n     </code>\n     for digital signature, then\n     <code>\n      2\n     </code>\n     for key encipherment, then anything else to end. When asked if this is a critical extension, enter\n     <code>\n      n\n     </code>\n     for no.\n    </p>\n    <p>\n     When you are asked about the extended key usage, enter\n     <code>\n      0\n     </code>\n     for server authentication,\n     <code>\n      1\n     </code>\n     for client authentication, then anything else to end. When asked if this is a critical extension, enter\n     <code>\n      n\n     </code>\n     for no.\n    </p>\n    <p>\n     Again, if you want to check that your server certificate is also in the database, issue the command:\n    </p>\n    <blockquote>\n     <code>\n      certutil -L -d sql:/etc/ipsec.d\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-7\">\n     </a>\n     1.7. Create Client Certificate\n    </h3>\n    <p>\n     Generate the client certificate, similar to the way you generated the server certificate. In the following example, replace\n     <code>\n      Example CA\n     </code>\n     ,\n     <code>\n      win10\n     </code>\n     ,\n     <code>\n      example.com\n     </code>\n     , and\n     <code>\n      Example\n     </code>\n     by your own values:\n    </p>\n    <blockquote>\n     <code>\n      certutil -S -c \"Example CA\" -n \"win10.example.com\" -s \"O=Example,CN=win10.example.com\" -k rsa -g 4096 -v 12 -d sql:/etc/ipsec.d -t \",,\" -1 -6 -8 \"win10.example.com\"\n     </code>\n    </blockquote>\n    <p>\n     Again, a random seed must be generated that will be used in the creation of your key. Do some random typing until the bar reaches the end. Then press\n     <strong>\n      Enter\n     </strong>\n     .\n    </p>\n    <p>\n     When you are asked about the usage, enter\n     <code>\n      0\n     </code>\n     for digital signature, then\n     <code>\n      2\n     </code>\n     for key encipherment, then anything else to end. When asked if this is a critical extension, enter\n     <code>\n      n\n     </code>\n     for no.\n    </p>\n    <p>\n     When you are asked about the extended key usage, enter\n     <code>\n      0\n     </code>\n     for server authentication,\n     <code>\n      1\n     </code>\n     for client authentication, then anything else to end. When asked if this is a critical extension, enter\n     <code>\n      n\n     </code>\n     for no.\n    </p>\n    <p>\n     Repeat this process if you have multiple clients, giving each one a different name instead of the\n     <code>\n      win10\n     </code>\n     we put in our examples.\n    </p>\n    <p>\n     If you want to see all the certificates you have put in the database, issue the command:\n    </p>\n    <blockquote>\n     <code>\n      certutil -L -d sql:/etc/ipsec.d\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-8\">\n     </a>\n     1.8. Configure Libreswan\n    </h3>\n    <p>\n     Create a new file for IKEv2 connections with machine certificate authenticaton:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/ipsec.d/ikev2-machine.conf\n     </code>\n    </blockquote>\n    <p>\n     Insert a configuration like this. Replace\n     <code>\n      yy.yy.yy.yy\n     </code>\n     by your server’s IP address. Also replace any other values, for example the virtual IP address pool or the DNS servers.\n    </p>\n    <pre>\nconn ikev2-machine\n    left=yy.yy.yy.yy\n    leftcert=yy.yy.yy.yy\n    leftid=@yy.yy.yy.yy\n    leftsendcert=always\n    leftsubnet=0.0.0.0/0\n    leftrsasigkey=%cert\n    right=%any\n    rightaddresspool=10.0.8.64-10.0.8.127\n    rightca=%same\n    rightrsasigkey=%cert\n    modecfgdns=\"8.8.8.8,8.8.4.4\"\n    narrowing=yes\n    dpddelay=30\n    dpdtimeout=120\n    dpdaction=clear\n    auto=add\n    ikev2=insist\n    rekey=no\n    fragmentation=yes\n</pre>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"1-9\">\n     </a>\n     1.9. Start Libreswan\n    </h3>\n    <p>\n     Start Libreswan after every reboot, and also start it now:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable ipsec\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start ipsec\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-10\">\n     </a>\n     1.10. Check Libreswan\n    </h3>\n    <p>\n     Check that Libreswan is active and running:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status ipsec\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-11\">\n     </a>\n     1.11. Create Client P12 File\n    </h3>\n    <p>\n     Many types of client prefer a P12 file over separate certificate and key files. A P12 file follows the Public Key Cryptography Standard #12 format, and include keys and certificates in one file.\n    </p>\n    <p>\n     Create a P12 file like this. Replace\n     <code>\n      win10\n     </code>\n     and\n     <code>\n      example.com\n     </code>\n     by your choices:\n    </p>\n    <blockquote>\n     <code>\n      pk12util -n \"win10.example.com\" -d sql:/etc/ipsec.d -o ~/win10.p12\n     </code>\n    </blockquote>\n    <p>\n     For higher security, protect the P12 file with a password when prompted. Anyone importing the P12 file into a client device will need to know this password.\n    </p>\n    <p>\n     Your work on the server side of things is done now, so exit your SSH session with the server:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-12\">\n     </a>\n     1.12. Securely Download Certificates\n    </h3>\n    <p>\n     The easiest way to securely download certificates to your device(s) is to first download them to a workstation on your LAN, where they will be behind a firewall, then transfer them from the workstation to your final clients.\n    </p>\n    <p>\n     To download to a Linux workstation, go to your workstation and use the\n     <code>\n      scp\n     </code>\n     command. For example:\n    </p>\n    <blockquote>\n     <code>\n      scp root@yy.yy.yy.yy:win10.p12 ~/Downloads/win10.p12\n     </code>\n    </blockquote>\n    <p>\n     To download to a Windows workstation, you can use the\n     <code>\n      pscp.exe\n     </code>\n     command that comes with\n     <a href=\"https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html\" target=\"_blank\">\n      PuTTY\n     </a>\n     . Here is a sample command that you would enter into a Windows Command Prompt:\n    </p>\n    <blockquote>\n     <code>\n      \"C:\\Program Files\\PuTTY\\pscp.exe\" root@yy.yy.yy.yy:win10.p12 Downloads\\win10.p12\n     </code>\n    </blockquote>\n    <p>\n     For onward transfer to mobile devices, it is often convenient to create a secure website that presents the certificate to the final client.\n    </p>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Windows Client\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Import Certificates\n    </h3>\n    <p>\n     Use the Microsoft Management Console to import certificates from the P12 file. Press the\n     <strong>\n      Win\n     </strong>\n     +\n     <strong>\n      r\n     </strong>\n     keys, type\n     <code>\n      mmc\n     </code>\n     , then press\n     <strong>\n      Enter\n     </strong>\n     . Do\n     <strong>\n      File\n     </strong>\n     ,\n     <strong>\n      Add/Remove Snap-in\n     </strong>\n     , then choose\n     <strong>\n      Certificates\n     </strong>\n     . You\n     <em>\n      must\n     </em>\n     select\n     <strong>\n      Computer Account\n     </strong>\n     . Import the P12 file into\n     <strong>\n      Personal\n     </strong>\n     . You will need to key in the password for the P12 file when you import it.\n    </p>\n    <p>\n     After import, but still in the Microsoft Management Console, cut the CA certificate (\n     <code>\n      Example CA\n     </code>\n     in our example), and paste it into\n     <strong>\n      Trusted Root Certification Authorities\n     </strong>\n     .\n    </p>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Add VPN Connection\n    </h3>\n    <p>\n     Add the new VPN connection in\n     <strong>\n      Settings\n     </strong>\n     &gt;\n     <strong>\n      Network &amp; Internet\n     </strong>\n     &gt;\n     <strong>\n      VPN\n     </strong>\n     . The VPN provider is\n     <strong>\n      Windows (built-in)\n     </strong>\n     . The Connection name is (for example)\n     <code>\n      win10\n     </code>\n     . The Server name or address in our example is\n     <code>\n      yy.yy.yy.yy\n     </code>\n     . The VPN type is\n     <strong>\n      IKEv2\n     </strong>\n     . The Type of sign-in info is\n     <strong>\n      Certificate\n     </strong>\n     .\n    </p>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Set Authentication Method to Machine Certificate\n    </h3>\n    <p>\n     Once you have added the new connection, check that the authentication method is set to machine certificate. For example, if you named the connection\n     <code>\n      win10\n     </code>\n     , then open PowerShell and issue the command:\n    </p>\n    <blockquote>\n     <code>\n      Get-VpnConnection -Name \"win10\"\n     </code>\n    </blockquote>\n    <p>\n     If necessary, set the authentication method to machine certificate:\n    </p>\n    <blockquote>\n     <code>\n      Set-VpnConnection -Name \"win10\" -AuthenticationMethod \"MachineCertificate\"\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Enable MODP2048 in Registry\n    </h3>\n    <p>\n     Now edit the registry to allow use of\n     <code>\n      modp2048\n     </code>\n     . Press the\n     <strong>\n      Win\n     </strong>\n     +\n     <strong>\n      r\n     </strong>\n     keys, type\n     <code>\n      regedit\n     </code>\n     , then press\n     <strong>\n      Enter\n     </strong>\n     . Navigate to\n     <code>\n      HKEY_LOCAL_MACHINE\n     </code>\n     &gt;\n     <code>\n      SYSTEM\n     </code>\n     &gt;\n     <code>\n      CurrentControlSet\n     </code>\n     &gt;\n     <code>\n      Services\n     </code>\n     &gt;\n     <code>\n      Rasman\n     </code>\n     &gt;\n     <code>\n      Parameters\n     </code>\n     . Insert a new DWORD (32-bit value). The name is\n     <code>\n      NegotiateDH2048_AES256\n     </code>\n     . The value is\n     <code>\n      1\n     </code>\n     , which means enable AES-256-CBC and MODP-2048.\n    </p>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Route Traffic through VPN\n    </h3>\n    <p>\n     Route all traffic through your VPN connection as follows. Open the\n     <strong>\n      Control Panel\n     </strong>\n     &gt;\n     <strong>\n      Network and Internet\n     </strong>\n     &gt;\n     <strong>\n      Network and Sharing Center\n     </strong>\n     . Click\n     <strong>\n      Change adapter settings\n     </strong>\n     . Select your IKEv2 interface. Right-click, and select\n     <strong>\n      Properties\n     </strong>\n     . Go to the\n     <strong>\n      Networking\n     </strong>\n     tab. Select the row for\n     <strong>\n      Internet Protocol Version 4 (TCP/IPv4)\n     </strong>\n     . Click\n     <strong>\n      Properties\n     </strong>\n     . Click\n     <strong>\n      Advanced\n     </strong>\n     . Check the box for\n     <strong>\n      Use default gateway on remote network\n     </strong>\n     .\n    </p>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Connect\n    </h3>\n    <p>\n     Now you can connect your client to your server from\n     <strong>\n      Settings\n     </strong>\n     &gt;\n     <strong>\n      Network &amp; Internet\n     </strong>\n     &gt;\n     <strong>\n      VPN\n     </strong>\n     .\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <p>\n     For your client device in general, seek support through the normal channels for that device. For Libreswan in particular, support arrangements are listed in the\n     <a href=\"https://libreswan.org/wiki/Support\" target=\"_blank\">\n      Libreswan wiki\n     </a>\n     .\n    </p>\n    <p>\n     <em>\n      Updated 2021-06-17\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}