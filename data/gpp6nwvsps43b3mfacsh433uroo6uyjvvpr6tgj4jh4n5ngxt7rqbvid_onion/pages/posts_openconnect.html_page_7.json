{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   OpenConnect\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     OpenConnect\n    </h1>\n    <p>\n     OpenConnect works in some countries that practice censorship. It uses HTTP and HTTPS to make the connection, then attempts to switch to UDP for the actual transport.\n    </p>\n    <p>\n     The software was originally designed to be compatible with Cisco AnyConnect SSL VPN. Support was later added for compatibility with Juniper SSL VPN and Pulse Connect Secure.\n    </p>\n    <p>\n     This article shows you how to install OpenConnect on CentOS 8 or Debian 10+ servers. Note that CentOS 8 reaches end-of-life on December 31, 2021.\n    </p>\n    <p>\n     The article ends with some pointers to OpenConnect clients.\n    </p>\n    <p>\n     You will need a server with a registered domain name (free or paid) if you want to follow along. We give the server hostname as\n     <code>\n      vpn.yyyyy.xyz\n     </code>\n     in our examples. You will need to change this to whatever your actual hostname is.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Install and Configure Firewall\n    </h3>\n    <p>\n     If your server runs CentOS 8, install a firewall and configure it to accept traffic on ports 80/tcp, 443/tcp, and 443/udp like this. Install and start the firewall:\n    </p>\n    <blockquote>\n     <code>\n      yum update -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      yum install firewalld -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl enable firewalld\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start firewalld\n     </code>\n    </blockquote>\n    <p>\n     Add the firewall rules for ports\n     <code>\n      80\n     </code>\n     and\n     <code>\n      443\n     </code>\n     , and masquerade the outgoing source IP address:\n    </p>\n    <blockquote>\n     <code>\n      firewall-cmd --add-service=http\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --add-service=https\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --add-port=443/udp\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --add-masquerade\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --runtime-to-permanent\n     </code>\n    </blockquote>\n    <p>\n     For better security, restrict port 22 access to trusted IP addresses only. For example, if you always log in from IP address\n     <code>\n      xx.xx.xx.xx\n     </code>\n     , make that the only IP address that will be trusted for SSH access:\n    </p>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=trusted --add-service=ssh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=trusted --add-source=xx.xx.xx.xx/32\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=public --remove-service=ssh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --zone=public --remove-service=cockpit\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --runtime-to-permanent\n     </code>\n    </blockquote>\n    <p>\n     If your server runs Debian 10+ or Ubuntu, install and configure your firewall like this. Install and start the firewall:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install nftables -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl enable nftables\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start nftables\n     </code>\n    </blockquote>\n    <p>\n     Add the basic firewall rules:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ct state related,established counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input iif lo counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ip protocol icmp counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ip6 nexthdr icmpv6 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport { http, https } counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input udp dport https counter accept\n     </code>\n    </blockquote>\n    <p>\n     Open port\n     <code>\n      22\n     </code>\n     for SSH. If you can restrict the port\n     <code>\n      22\n     </code>\n     rule so that only certain source IP addresses are whitelisted for SSH access, then so much the better. For example, if your workstation always has IP address\n     <code>\n      xx.xx.xx.xx\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport 22 ip saddr xx.xx.xx.xx/32 counter accept\n     </code>\n    </blockquote>\n    <p>\n     If you cannot predict your workstation IP address, you will have to open port\n     <code>\n      22\n     </code>\n     to the whole world.\n    </p>\n    <p>\n     Drop unexpected traffic:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input counter drop\n     </code>\n    </blockquote>\n    <p>\n     Carry out network address translation (nat), and masquerade the IP address on outbound packets:\n    </p>\n    <blockquote>\n     <code>\n      nft add table nat\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add chain nat prerouting { type nat hook prerouting priority 0 \\; }\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add chain nat postrouting { type nat hook postrouting priority 100 \\; }\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule nat postrouting ip saddr 10.0.8.0/24 masquerade\n     </code>\n    </blockquote>\n    <p>\n     Save these firewall rules:\n    </p>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Allow Forwarding\n    </h3>\n    <p>\n     Now enable packet forwarding in the Linux kernel.\n    </p>\n    <p>\n     On CentOS, create a new configuration file in\n     <code>\n      /usr/lib/sysctl.d\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/lib/sysctl.d/40-ipv4-forward.conf\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu, create a new configuration file in\n     <code>\n      /etc/sysctl.d\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/sysctl.d/40-ipv4-forward.conf\n     </code>\n    </blockquote>\n    <p>\n     In either case, insert a single line:\n    </p>\n    <blockquote>\n     <code>\n      net.ipv4.ip_forward=1\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Make this change effective immediately. On CentOS:\n    </p>\n    <blockquote>\n     <code>\n      sysctl -p /usr/lib/sysctl.d/40-ipv4-forward.conf\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      sysctl -p /etc/sysctl.d/40-ipv4-forward.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Install Letâ€™s Encrypt Client\n    </h3>\n    <p>\n     On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      yum install epel-release -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      yum install certbot -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      apt install certbot -y\n     </code>\n    </blockquote>\n    <p>\n     In either case, request your certificate as follows. Replace\n     <code>\n      vpn.yyyyy.xyz\n     </code>\n     in the next command by your actual hostname:\n    </p>\n    <blockquote>\n     <code>\n      certbot certonly --standalone --agree-tos --register-unsafely-without-email -d vpn.yyyyy.xyz\n     </code>\n    </blockquote>\n    <p>\n     Your certificate is stored at\n     <code>\n      /etc/letsencrypt/live/vpn.yyyyy.xyz/fullchain.pem\n     </code>\n     , and its private key is stored at\n     <code>\n      /etc/letsencrypt/live/vpn.yyyyy.xyz/privkey.pem\n     </code>\n     .\n    </p>\n    <p>\n     Set up the timer for regular checks for renewal. On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      echo \"0 0,12 * * * root python3 -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q\" | sudo tee -a /etc/crontab &gt; /dev/null\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      certbot renew --dry-run\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Install OpenConnect on Server\n    </h3>\n    <p>\n     Install the OpenConnect package. On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      yum install ocserv -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      apt install ocserv -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Configure OpenConnect on Server\n    </h3>\n    <p>\n     Edit the OpenConnect configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/ocserv/ocserv.conf\n     </code>\n    </blockquote>\n    <p>\n     Make the following changes. Refer to the\n     <a href=\"https://ocserv.gitlab.io/www/manual.html\" target=\"_blank\">\n      OpenConnect manual on GitLab\n     </a>\n     if you want to understand the options available to you.\n    </p>\n    <ul>\n     <li>\n      Enable authetication by password file by changing the authentication to\n      <code>\n       auth = \"plain[passwd=/etc/ocserv/ocpasswd]\"\n      </code>\n     </li>\n     <li>\n      Change the server certificate and private key locations to\n      <code>\n       /etc/letsencrypt/live/vpn.yyyyy.xyz/fullchain.pem\n      </code>\n      and\n      <code>\n       /etc/letsencrypt/live/vpn.yyyyy.xyz/privkey.pem\n      </code>\n      , replacing\n      <code>\n       vpn.yyyyy.xyz\n      </code>\n      by your actual hostname\n     </li>\n     <li>\n      Comment out or remove the line for\n      <code>\n       ca-cert\n      </code>\n      , since we are not using certificate authentication for clients\n     </li>\n     <li>\n      In the\n      <code>\n       default-domain\n      </code>\n      line, put your actual domain name\n     </li>\n     <li>\n      Specify the virtual IP address range for your VPN, for example\n      <code>\n       ipv4-network = 10.0.8.0\n      </code>\n      and\n      <code>\n       ipv4-netmask = 255.255.255.0\n      </code>\n     </li>\n     <li>\n      If you want DNS resolution on the server rather than at clients, insert a line\n      <code>\n       tunnel-all-dns = true\n      </code>\n      and specify two DNS servers, e.g.\n      <code>\n       dns = 8.8.8.8\n      </code>\n      and\n      <code>\n       dns = 8.8.4.4\n      </code>\n     </li>\n     <li>\n      If clients need to access their LAN without going through the server, then specify that the LAN subnet should not be routed through the tunnel, for example\n      <code>\n       no-route = 192.168.0.0/255.255.0.0\n      </code>\n      (and delete the\n      <code>\n       route\n      </code>\n      lines\n     </li>\n    </ul>\n    <p>\n     If you find the comments and blank lines in the configuration file helpful, then leave them in. If you want to remove comments and blank lines with the\n     <code>\n      vi\n     </code>\n     editor, then issue global commands to delete lines that begin with\n     <code>\n      #\n     </code>\n     or are blank:\n    </p>\n    <blockquote>\n     <code>\n      :g/^#/d\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      :g/^$/d\n     </code>\n    </blockquote>\n    <p>\n     Here is an example of a completed OpenConnect configuration file for CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      auth = \"plain[passwd=/etc/ocserv/ocpasswd]\"\n      <br/>\n      tcp-port = 443\n      <br/>\n      udp-port = 443\n      <br/>\n      run-as-user = ocserv\n      <br/>\n      run-as-group = ocserv\n      <br/>\n      socket-file = ocserv.sock\n      <br/>\n      chroot-dir = /var/lib/ocserv\n      <br/>\n      server-cert = /etc/letsencrypt/live/vpn.yyyyy.xyz/fullchain.pem\n      <br/>\n      server-key = /etc/letsencrypt/live/vpn.yyyyy.xyz/privkey.pem\n      <br/>\n      isolate-workers = true\n      <br/>\n      max-clients = 16\n      <br/>\n      max-same-clients = 2\n      <br/>\n      server-stats-reset-time = 604800\n      <br/>\n      keepalive = 32400\n      <br/>\n      dpd = 90\n      <br/>\n      mobile-dpd = 1800\n      <br/>\n      switch-to-tcp-timeout = 25\n      <br/>\n      try-mtu-discovery = false\n      <br/>\n      cert-user-oid = 0.9.2342.19200300.100.1.1\n      <br/>\n      tls-priorities = \"@SYSTEM:%SERVER_PRECEDENCE\"\n      <br/>\n      auth-timeout = 240\n      <br/>\n      min-reauth-time = 300\n      <br/>\n      max-ban-score = 80\n      <br/>\n      ban-reset-time = 1200\n      <br/>\n      cookie-timeout = 300\n      <br/>\n      deny-roaming = false\n      <br/>\n      rekey-time = 172800\n      <br/>\n      rekey-method = ssl\n      <br/>\n      use-occtl = true\n      <br/>\n      pid-file = /var/run/ocserv.pid\n      <br/>\n      device = vpns\n      <br/>\n      predictable-ips = true\n      <br/>\n      default-domain = yyyyy.xyz\n      <br/>\n      ipv4-network = 10.0.8.0\n      <br/>\n      ipv4-netmask = 255.255.255.0\n      <br/>\n      tunnel-all-dns = true\n      <br/>\n      dns = 8.8.8.8\n      <br/>\n      dns = 8.8.4.4\n      <br/>\n      ping-leases = false\n      <br/>\n      no-route = 192.168.0.0/255.255.0.0\n      <br/>\n      cisco-client-compat = true\n      <br/>\n      dtls-legacy = true\n     </code>\n    </blockquote>\n    <p>\n     And here is an example of a completed OpenConnect configuration file for Debian 10+ or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      auth = \"plain[passwd=/etc/ocserv/ocpasswd]\"\n      <br/>\n      tcp-port = 443\n      <br/>\n      udp-port = 443\n      <br/>\n      run-as-user = nobody\n      <br/>\n      run-as-group = daemon\n      <br/>\n      socket-file = /run/ocserv.socket\n      <br/>\n      server-cert = /etc/letsencrypt/live/vpn.yyyyy.xyz/fullchain.pem\n      <br/>\n      server-key = /etc/letsencrypt/live/vpn.yyyyy.xyz/privkey.pem\n      <br/>\n      isolate-workers = true\n      <br/>\n      max-clients = 128\n      <br/>\n      max-same-clients = 2\n      <br/>\n      server-stats-reset-time = 604800\n      <br/>\n      keepalive = 300\n      <br/>\n      dpd = 60\n      <br/>\n      mobile-dpd = 300\n      <br/>\n      switch-to-tcp-timeout = 30\n      <br/>\n      try-mtu-discovery = false\n      <br/>\n      cert-user-oid = 0.9.2342.19200300.100.1.1\n      <br/>\n      compression = true\n      <br/>\n      no-compress-limit = 256\n      <br/>\n      tls-priorities = \"NORMAL:%SERVER_PRECEDENCE:%COMPAT:-RSA:-VERS-SSL3.0:-ARCFOUR-128\"\n      <br/>\n      auth-timeout = 240\n      <br/>\n      idle-timeout = 1200\n      <br/>\n      mobile-idle-timeout = 1800\n      <br/>\n      min-reauth-time = 3\n      <br/>\n      max-ban-score = 50\n      <br/>\n      ban-reset-time = 300\n      <br/>\n      cookie-timeout = 300\n      <br/>\n      deny-roaming = false\n      <br/>\n      rekey-time = 172800\n      <br/>\n      rekey-method = ssl\n      <br/>\n      use-occtl = true\n      <br/>\n      pid-file = /run/ocserv.pid\n      <br/>\n      device = vpns\n      <br/>\n      predictable-ips = true\n      <br/>\n      default-domain = yyyyy.xyz\n      <br/>\n      ipv4-network = 10.0.8.0\n      <br/>\n      ipv4-netmask = 255.255.255.0\n      <br/>\n      tunnel-all-dns = true\n      <br/>\n      dns = 8.8.8.8\n      <br/>\n      dns = 8.8.4.4\n      <br/>\n      ping-leases = falsereboot\n      <br/>\n      no-route = 192.168.0.0/255.255.0.0\n      <br/>\n      cisco-client-compat = true\n      <br/>\n      dtls-legacy = true\n     </code>\n    </blockquote>\n    <p>\n     After making these changes, save your amended configuration file.\n    </p>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Add Client Users\n    </h3>\n    <p>\n     For each user, set up a username and password, using the command below as a model, and replacing\n     <code>\n      john\n     </code>\n     by your actual username:\n    </p>\n    <blockquote>\n     <code>\n      ocpasswd -c /etc/ocserv/ocpasswd john\n     </code>\n    </blockquote>\n    <p>\n     When prompted, enter and reenter the password for user john. For example:\n    </p>\n    <blockquote>\n     <code>\n      nq3vwr766zqmj4da\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nq3vwr766zqmj4da\n     </code>\n    </blockquote>\n    <p>\n     You can repeat this process if you have multiple users.\n    </p>\n    <h3>\n     <a id=\"1-7\">\n     </a>\n     1.7. Start OpenConnect Server\n    </h3>\n    <p>\n     Now restart OpenConnect with your revised configuration.\n    </p>\n    <p>\n     On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable ocserv\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ystemctl start ocserv\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart ocserv\n     </code>\n    </blockquote>\n    <p>\n     Check that OpenConnect is active and running:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status ocserv\n     </code>\n    </blockquote>\n    <p>\n     You may get an error saying,\n     <code>\n      error connecting to sec-mod socket 'ocserv.sock.xxxxxxxx': No such file or directory\n     </code>\n     . This does not seem to make any difference, as the file gets created anyway. You can check that OpenConnect is listening on ports\n     <code>\n      443/tcp\n     </code>\n     and\n     <code>\n      443/udp\n     </code>\n     with the command:\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep ocserv\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Clients\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Linux\n    </h3>\n    <p>\n     OpenConnect in NetworkManager has been integrated with GNOME. On CentOS 8 clients, install the package and its dependencies:\n    </p>\n    <blockquote>\n     <code>\n      sudo yum install epel-release -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo yum install NetworkManager-openconnect-gnome -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian 10+ or Ubuntu, install the package and its dependencies:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install network-manager-openconnect-gnome -y\n     </code>\n    </blockquote>\n    <p>\n     In either case, add your VPN configuration from the GNOME\n     <strong>\n      Settings\n     </strong>\n     &gt;\n     <strong>\n      Network\n     </strong>\n     page.\n    </p>\n    <img alt=\"GNOME desktop Network settings page\" src=\"../images/openconnect-network.png\"/>\n    <ul>\n     <li>\n      Type is\n      <strong>\n       Multi-protocol VPN client (openconnect)\n      </strong>\n      or\n      <strong>\n       Cisco AnyConnect Compatible\n      </strong>\n     </li>\n     <li>\n      Name as desired, e.g.\n      <code>\n       New York\n      </code>\n     </li>\n     <li>\n      Protocol is\n      <strong>\n       Cisco AnyConnect\n      </strong>\n      or\n      <strong>\n       openconnect\n      </strong>\n     </li>\n     <li>\n      Gateway is your server hostname, e.g.\n      <code>\n       vpn.yyyyy.xyz\n      </code>\n      in our example\n     </li>\n    </ul>\n    <img alt=\"Adding a VPN in GNOME desktop\" src=\"../images/openconnect-add-vpn.png\"/>\n    <p>\n     Click\n     <strong>\n      Add\n     </strong>\n     to add the new VPN.\n    </p>\n    <p>\n     Toggle the connection to the\n     <strong>\n      ON\n     </strong>\n     position. Enter your username. Enter your password. Check\n     <strong>\n      Save passwords\n     </strong>\n     . Click\n     <strong>\n      Login\n     </strong>\n     .\n    </p>\n    <img alt=\"OpenConnect after logging in on GNOME desktop\" src=\"../images/openconnect-logged-in.png\"/>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Windows\n    </h3>\n    <p>\n     Install the OpenConnect GUI for Windows from\n     <a href=\"https://openconnect.github.io/openconnect-gui\" target=\"_blank\">\n      GitHub\n     </a>\n     .\n    </p>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Android\n    </h3>\n    <p>\n     For Android devices, install OpenConnect by Digital Software Group from the\n     <a href=\"https://play.google.com/store/apps/details?id=com.github.digitalsoftwaresolutions.openconnect\" target=\"_blank\">\n      Google Play Store\n     </a>\n     .\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <p>\n     You can ask questions and raise issues in these two places:\n    </p>\n    <ul>\n     <li>\n      On the\n      <a href=\"http://lists.infradead.org/mailman/listinfo/openconnect-devel\" target=\"_blank\">\n       Mailing list\n      </a>\n     </li>\n     <li>\n      In the\n      <a href=\"https://gitlab.com/openconnect/openconnect/-/issues\" target=\"_blank\">\n       GitLab issues\n      </a>\n      section\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2021-06-18\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}