{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   WireGuard + Shadowsocks\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     WireGuard + Shadowsocks\n    </h1>\n    <p>\n     WireGuard is a popular new VPN protocol. A known limitation of WireGuard is that it is vulnerable to deep packet inspection. Combining WireGuard with Shadowsocks obfuscates the WireGuard protocol.\n    </p>\n    <p>\n     In this tutorial, WireGuard and Shadowsocks are implemented on an Ubuntu Linux server and an Ubuntu Linux client. The client is assumed to be at IP address\n     <code>\n      11.11.11.11\n     </code>\n     , and the server is assumed to be at IP address\n     <code>\n      22.22.22.22\n     </code>\n     . We will use port\n     <code>\n      1433\n     </code>\n     for Shadowsocks and port\n     <code>\n      51820\n     </code>\n     for WireGuard.\n    </p>\n    <p>\n     We assume that you SSH into the server as\n     <code>\n      root\n     </code>\n     but use a non-root username with sudo permissions on the client.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Update Server\n    </h3>\n    <p>\n     Before you do anything else, get your server completely up to date:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Configure Firewall\n    </h3>\n    <p>\n     We are going to use port\n     <code>\n      1433\n     </code>\n     for the Shadowsocks server. Although we use port\n     <code>\n      51820\n     </code>\n     for the WireGuard server, this port can be kept closed to the public, since that will better camouflage your server.\n    </p>\n    <p>\n     Here are some sample iptables rules for IPv4. In this example, SSH is confined to a single IP address, which is\n     <code>\n      11.11.11.11\n     </code>\n     in the example. Replace\n     <code>\n      11.11.11.11\n     </code>\n     by the actual IP address of your workstation.\n    </p>\n    <blockquote>\n     <code>\n      iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -i lo -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p icmp -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 22 -s 11.11.11.11/32 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p udp --dport 1433 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -P INPUT DROP\n     </code>\n    </blockquote>\n    <p>\n     Here are some sample rules for IPv6. Note that in our example, we assume you always use IPv4 for SSH, so the firewall is not open for SSH input over IPv6:\n    </p>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -i lo -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -p icmpv6 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -p udp --dport 1433 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -P INPUT DROP\n     </code>\n    </blockquote>\n    <p>\n     To persist these rules across reboots, install the package iptables-persistent:\n    </p>\n    <blockquote>\n     <code>\n      apt install iptables-persistent -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Install WireGuard\n    </h3>\n    <p>\n     Install WireGuard using the script and instructions from\n     <a href=\"https://github.com/angristan/wireguard-install\" target=\"_blank\">\n      https://github.com/angristan/wireguard-install\n     </a>\n     :\n    </p>\n    <blockquote>\n     <code>\n      apt install curl -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      chmod +x wireguard-install.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./wireguard-install.sh\n     </code>\n    </blockquote>\n    <p>\n     You can accept the defaults all the way through the script’s questions, except specify the server’s WireGuard port as\n     <code>\n      51820\n     </code>\n     .\n    </p>\n    <p>\n     When prompted for the name of the first client, call it\n     <code>\n      wgss\n     </code>\n     . This causes the script to create a client configuration file named\n     <code>\n      wg0-client-wgss.conf\n     </code>\n     .\n    </p>\n    <p>\n     The server configuration is placed in\n     <code>\n      /etc/wireguard/wg0.conf\n     </code>\n     . You can check the status of the systemd service with the command:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status wg-quick@wg0\n     </code>\n    </blockquote>\n    <p>\n     It should read\n     <code>\n      active (exited)\n     </code>\n     .\n    </p>\n    <p>\n     Press the\n     <strong>\n      q\n     </strong>\n     key on your computer keyboard to quit the status display.\n    </p>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Install Shadowsocks\n    </h3>\n    <p>\n     Install\n     <code>\n      shadowsocks-libev\n     </code>\n     from the repositories:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install shadowsocks-libev\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Generate Password for Shadowsocks\n    </h3>\n    <p>\n     Generate a 192-bit password, expressed as 32 base-64 characters, with the command:\n    </p>\n    <blockquote>\n     <code>\n      openssl rand -base64 24\n     </code>\n    </blockquote>\n    <p>\n     We will use the example:\n    </p>\n    <blockquote>\n     <code>\n      C3WOo2qwJCJaiJpe9DY4pGBUC/WGMDxx\n     </code>\n    </blockquote>\n    <p>\n     In what follows, replace the example with your own generated password.\n    </p>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Configure Shadowsocks\n    </h3>\n    <p>\n     Edit your Shadowsocks server configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/shadowsocks-libev/config.json\n     </code>\n    </blockquote>\n    <p>\n     Delete the existing contents, and insert contents as follows:\n    </p>\n    <pre>\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 1433,\n  \"password\": \"C3WOo2qwJCJaiJpe9DY4pGBUC/WGMDxx\",\n  \"timeout\": 300,\n  \"method\": \"chacha20-ietf-poly1305\",\n  \"mode\": \"udp_only\"\n}\n</pre>\n    <p>\n     Replace\n     <code>\n      C3WOo2qwJCJaiJpe9DY4pGBUC/WGMDxx\n     </code>\n     by your actual password.\n    </p>\n    <p>\n     Write the file to disk. Quit the editor.\n    </p>\n    <h3>\n     <a id=\"1-7\">\n     </a>\n     1.7. Run Shadowsocks\n    </h3>\n    <p>\n     The Shadowsocks systemd service is already running. Restart the service with your new configuration file:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart shadowsocks-libev\n     </code>\n    </blockquote>\n    <p>\n     Exit your SSH session with the server:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Client\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Update Client\n    </h3>\n    <p>\n     Before you do anything else, get your client completely up to date:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt update &amp;&amp; sudo apt upgrade -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Install Shadowsocks\n    </h3>\n    <p>\n     Install\n     <code>\n      shadowsocks-libev\n     </code>\n     from the repositories:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install shadowsocks-libev\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Configure Shadowsocks\n    </h3>\n    <p>\n     Edit your Shadowsocks client configuration file:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /etc/shadowsocks-libev/config.json\n     </code>\n    </blockquote>\n    <p>\n     Delete the contents, and insert new contents as follows:\n    </p>\n    <pre>\n{\n  \"server\": \"22.22.22.22\",\n  \"server_port\": 1433,\n  \"local_address\": \"127.0.0.1\",\n  \"local_port\": 1080,\n  \"password\": \"C3WOo2qwJCJaiJpe9DY4pGBUC/WGMDxx\",\n  \"timeout\": 300,\n  \"method\": \"chacha20-ietf-poly1305\",\n  \"mode\": \"udp_only\",\n  \"tunnel_address\": \"127.0.0.1:51820\"\n}\n</pre>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     by the actual IP address of your server. Replace\n     <code>\n      C3WOo2qwJCJaiJpe9DY4pGBUC/WGMDxx\n     </code>\n     by your actual password.\n    </p>\n    <p>\n     Write the file to disk. Quit the editor.\n    </p>\n    <p>\n     Edit the systemd service file:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /usr/lib/systemd/system/shadowsocks-libev.service\n     </code>\n    </blockquote>\n    <p>\n     Change the binary from\n     <code>\n      ss-server\n     </code>\n     to\n     <code>\n      ss-tunnel\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      ExecStart=/usr/bin/ss-tunnel -c $CONFFILE $DAEMON_ARGS\n     </code>\n    </blockquote>\n    <p>\n     Write the file to disk. Quit the editor.\n    </p>\n    <p>\n     Reload systemd:\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl daemon-reload\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Run Shadowsocks\n    </h3>\n    <p>\n     Shadowsocks systemd service is already running. Restart it with your new service file and configuration file:\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl restart shadowsocks-libev\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Install WireGuard\n    </h3>\n    <p>\n     Install WireGuard on the client:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install wireguard resolvconf -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Configure WireGuard\n    </h3>\n    <p>\n     Download the WireGuard client configuration file from the server.\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      scp root@22.22.22.22:wg0-client-wgss.conf .\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the above command by your actual server IP address.\n    </p>\n    <p>\n     Copy the configuration file into place:\n    </p>\n    <blockquote>\n     <code>\n      sudo cp wg0-client-wgss.conf /etc/wireguard/wg0.conf\n     </code>\n    </blockquote>\n    <p>\n     Edit the WireGuard client configuration file:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /etc/wireguard/wg0.conf\n     </code>\n    </blockquote>\n    <p>\n     Shadowsocks will take care of forwarding packets to the real server IP address. Therefore change the endpoint of the peer to be localhost port 1080, which is where Shadowsocks expects its input.\n    </p>\n    <p>\n     Here is a sample client configuration file after changes:\n    </p>\n    <pre>\n[Interface]\nPrivateKey = kNBDeCk8Nz4ir2qsFd88QthH8CyCPOqS6x1z596MNGA=\nAddress = 10.66.66.2/32,fd42:42:42::2/128\nDNS = 94.140.14.14,94.140.15.15\n\n[Peer]\nPublicKey = q+z9MX5ii/YaSivcFim4mXA1zPpopPTSt7YEAyK6s1o=\nPresharedKey = Sj+DR9NR0FbXOFC8ht9sITdnEzSEhrjvts0ljZarEtA=\nEndpoint = 127.0.0.1:1080\nAllowedIPs = 0.0.0.0/0,::/0\n</pre>\n    <p>\n     If your client does not support IPv6, remove the IPv6 addresses (\n     <code>\n      fd42:42:42::2/128\n     </code>\n     and\n     <code>\n      ::/0\n     </code>\n     ).\n    </p>\n    <p>\n     Write the file to disk. Quit the editor.\n    </p>\n    <h3>\n     <a id=\"2-7\">\n     </a>\n     2.7 Add Static Route\n    </h3>\n    <p>\n     Add a static route from the client to the server, so that it does not try to send WireGuard traffic via Shadowsocks, then Shadowsocks via WireGuard, in a continuous and never-ending loop. For example, if your default gateway is\n     <code>\n      192.168.1.1\n     </code>\n     and your interface is\n     <code>\n      wlp3s0\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      sudo ip route add 22.22.22.22 via 192.168.1.1 dev wlp3s0\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the above by your actual server IP address. Replace\n     <code>\n      192.168.1.1\n     </code>\n     and\n     <code>\n      wlp3s0\n     </code>\n     by your actual default gateway. If you do not know your default gateway already, you can obtain it by issuing the command\n     <code>\n      ip r\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"2-8\">\n     </a>\n     2.8. Run WireGuard\n    </h3>\n    <blockquote>\n     <code>\n      sudo wg-quick up wg0\n     </code>\n    </blockquote>\n    <p>\n     You can test your connection by visiting\n     <a href=\"https://whatismyipaddress.com\" target=\"_blank\">\n      https://whatismyipaddress.com\n     </a>\n     in Firefox.\n    </p>\n    <h3>\n     <a id=\"2-9\">\n     </a>\n     2.9. Disconnect\n    </h3>\n    <p>\n     Stop WireGuard:\n    </p>\n    <blockquote>\n     <code>\n      sudo wg-quick down wg0\n     </code>\n    </blockquote>\n    <p>\n     Stop Shadowsocks:\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl stop shadowsocks-libev\n     </code>\n    </blockquote>\n    <p>\n     Delete the static route:\n    </p>\n    <blockquote>\n     <code>\n      sudo ip route del 22.22.22.22 via 192.168.1.1 dev wlp3s0\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the above by your actual server IP address. Replace\n     <code>\n      192.168.1.1\n     </code>\n     and\n     <code>\n      wlp3s0\n     </code>\n     by your actual default gateway.\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <p>\n     For WireGuard, the best place to get help is the\n     <code>\n      #wireguard\n     </code>\n     IRC channel on\n     <a href=\"https://web.libera.chat/#wireguard\" target=\"_blank\">\n      libera.chat\n     </a>\n     .\n    </p>\n    <p>\n     For Shadowsocks issues, see the\n     <a href=\"https://github.com/shadowsocks/shadowsocks-libev/issues\" target=\"_blank\">\n      GitHub issues page\n     </a>\n     .\n    </p>\n    <p>\n     <em>\n      Updated 2022-02-08\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}