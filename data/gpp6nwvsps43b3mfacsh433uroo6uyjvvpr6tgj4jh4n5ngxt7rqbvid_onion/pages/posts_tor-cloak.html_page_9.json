{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   Tor + Cloak\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     Tor + Cloak\n    </h1>\n    <p>\n     In this arrangement we use Cloak to build a disguised private Tor bridge. This is an alternative to building an obfs4 private bridge. It hides the fact that you are using Tor and protects you from malicious guard nodes.\n    </p>\n    <p>\n     We give instructions for a Debian 10 server, with a camouflage website running on Nginx. The process will be similar for an Ubuntu server. Before you set up your server:\n    </p>\n    <ul>\n     <li>\n      You will need a domain name, either free or paid\n     </li>\n     <li>\n      You will need to create a DNS\n      <code>\n       A\n      </code>\n      record pointing from your server hostname to your server’s IP address\n     </li>\n    </ul>\n    <p>\n     In the examples in this article, we give the server host name as\n     <code>\n      zzz.yyyyy.xyz\n     </code>\n     and the server IP address as\n     <code>\n      zz.zz.zz.zz\n     </code>\n     .\n    </p>\n    <p>\n     We end the tutorial by describing the procedure for setting up a Ubuntu 21.04 client. If your server or client runs a recent version of Debian, the procedures will be very similar to those for Ubuntu 21.04. If your PC runs Windows or macOS, you will need to experiment on your own.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Set Up Camouflage Web Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Open Firewall\n    </h3>\n    <p>\n     Firewalls may be implemented with\n     <code>\n      nftables\n     </code>\n     ,\n     <code>\n      iptables\n     </code>\n     ,\n     <code>\n      ufw\n     </code>\n     ,\n     <code>\n      firewalld\n     </code>\n     , or Cloud security groups. Whichever one you are using, you will need to open ports\n     <code>\n      80\n     </code>\n     and\n     <code>\n      443\n     </code>\n     for TCP input and persist your changes across reboots.\n    </p>\n    <p>\n     For example, if you are using\n     <code>\n      nftables\n     </code>\n     with a policy of\n     <code>\n      drop\n     </code>\n     on Debian 10, the commands would be:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport { http, https } counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <p>\n     If you are not using nftables, then make the equivalent changes for your firewall.\n    </p>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Implement BBR\n    </h3>\n    <p>\n     Bottleneck Bandwidth and Round-trip propagation time (BBR) is a TCP congestion control algorithm developed at Google. Under certain types of network congestion, it will improve your latency. Implement BBR TCP congestion control on your server with the following commands:\n    </p>\n    <blockquote>\n     <code>\n      cat &gt;&gt; /etc/sysctl.d/50-bbr.conf &lt;&lt;EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      net.core.default_qdisc=fq\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      net.ipv4.tcp_congestion_control=bbr\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sysctl -p /etc/sysctl.d/50-bbr.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Install Nginx\n    </h3>\n    <p>\n     Install the Nginx web server on your server:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install nginx -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Configure Nginx\n    </h3>\n    <p>\n     We want to make the Nginx web site look as much as possible like a realistic production server. Therefore edit the main Nginx configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/nginx/nginx.conf\n     </code>\n    </blockquote>\n    <p>\n     Uncomment the line:\n    </p>\n    <blockquote>\n     <code>\n      server_tokens off;\n     </code>\n    </blockquote>\n    <p>\n     Save the main Nginx configuration file. Then edit the default site definition file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/nginx/sites-available/default\n     </code>\n    </blockquote>\n    <p>\n     Insert the real server name, which in our example is\n     <code>\n      zzz.yyyyy.xyz\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      server_name zzz.yyyyy.xyz;\n     </code>\n    </blockquote>\n    <p>\n     Immediately below that, insert lines that will allow only expected HTTP request methods:\n    </p>\n    <pre>    if ($request_method !~ ^(GET|HEAD|POST)$ )\n    {\n            return 405;\n    }\n</pre>\n    <p>\n     Just like a real web server, also add a line to provide some realistic browser caching:\n    </p>\n    <blockquote>\n     <code>\n      expires 1h;\n     </code>\n    </blockquote>\n    <img alt=\"Nginx default site configuration\" src=\"../images/tc-nginx-config.png\"/>\n    <p>\n     Save the default site definition file. Restart Nginx for all your changes:\n    </p>\n    <blockquote>\n     <code>\n      nginx -t\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl restart nginx\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Add Camouflage Content to Web Server\n    </h3>\n    <p>\n     Add a few realistic webpages to your camouflage site. Here is an example of how you might do that. You can add different content if you have some.\n    </p>\n    <blockquote>\n     <code>\n      apt install wget zip unzip -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://github.com/arcdetri/sample-blog/archive/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp -rf sample-blog-master/html/* /var/www/html/\n     </code>\n    </blockquote>\n    <p>\n     At this point, you can test to see if your host name resolves to your IP address by opening a browser on your PC and visiting the HTTP version of your site. Using our example of a host named\n     <code>\n      zzz.yyyyy.xyz\n     </code>\n     , that would be:\n    </p>\n    <blockquote>\n     <code>\n      http://zzz.yyyyy.xyz\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Add SSL Certificate to Web Server\n    </h3>\n    <p>\n     Now we make the site accessible by HTTPS on port 443, following the instructions for Nginx and Debian 10 on the\n     <a href=\"https://certbot.eff.org/\" target=\"_blank\">\n      Certbot website\n     </a>\n     .\n    </p>\n    <blockquote>\n     <code>\n      apt install certbot python-certbot-nginx -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      certbot --nginx\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      certbot renew --dry-run\n     </code>\n    </blockquote>\n    <p>\n     You now have a working HTTPS camouflage website with a few sample pages on it. Test this by opening a browser on your PC and visiting the HTTPS version of your site. In our example, that would be:\n    </p>\n    <blockquote>\n     <code>\n      https://zzz.yyyyy.xyz\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Install Tor on Server\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Install Tor\n    </h3>\n    <p>\n     Install the prerequisite package:\n    </p>\n    <blockquote>\n     <code>\n      apt install apt-transport-https -y\n     </code>\n    </blockquote>\n    <p>\n     Add the Tor repositories to your Advanced Packaging Tool (APT) sources list:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/apt/sources.list\n     </code>\n    </blockquote>\n    <p>\n     Add lines at the bottom for the Tor project repositories for Debian\n     <code>\n      buster\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      deb https://deb.torproject.org/torproject.org buster main\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      deb-src https://deb.torproject.org/torproject.org buster main\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <p>\n     Add the GNU Privacy Guard (GPG) key used to sign the Tor packages.\n    </p>\n    <blockquote>\n     <code>\n      apt install gpg -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget -qO- https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --import\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -\n     </code>\n    </blockquote>\n    <p>\n     Update your package lists:\n    </p>\n    <blockquote>\n     <code>\n      apt update\n     </code>\n    </blockquote>\n    <p>\n     Install Tor and the Tor Debian keyring from the Tor project repository:\n    </p>\n    <blockquote>\n     <code>\n      apt install tor deb.torproject.org-keyring -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Configure Tor\n    </h3>\n    <p>\n     Edit the Tor configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/tor/torrc\n     </code>\n    </blockquote>\n    <p>\n     Delete the existing lines. Use the template below as a model for your configuration file. At a minimum, replace the\n     <code>\n      Nickname\n     </code>\n     with your own choice of nickname. Notice that we did not open port\n     <code>\n      9001\n     </code>\n     in the firewall. Also notice the line\n     <code>\n      PublishServerDescriptor 0\n     </code>\n     . Both of these measures help to keep the bridge hidden.\n    </p>\n    <blockquote>\n     <code>\n      Log notice file /var/log/tor/log\n      <br/>\n      ORPort 9001\n      <br/>\n      AssumeReachable 1\n      <br/>\n      SocksPort 0\n      <br/>\n      ORPort auto\n      <br/>\n      BridgeRelay 1\n      <br/>\n      Exitpolicy reject *:*\n      <br/>\n      PublishServerDescriptor 0\n      <br/>\n      Nickname yourchoiceofnick\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Restart Tor\n    </h3>\n    <p>\n     Restart Tor with your revised configuration file:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart tor\n     </code>\n    </blockquote>\n    <p>\n     Check the results:\n    </p>\n    <blockquote>\n     <code>\n      tail /var/log/tor/log\n     </code>\n    </blockquote>\n    <p>\n     After a minute or so, you should see\n     <code>\n      Bootstrapped 100% (done): Done\n     </code>\n     .\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Install Cloak on Server\n    </h2>\n    <h3>\n     <a id=\"3-1\">\n     </a>\n     3.1. Move HTTPS Site to Port 8443\n    </h3>\n    <p>\n     Right now, Nginx is listening on ports 80 and 443. We’re going to make Cloak listen on port 443, so we’ll move Nginx and make it listen on port 8443 instead.\n    </p>\n    <p>\n     Edit the Nginx default site definition file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/nginx/sites-available/default\n     </code>\n    </blockquote>\n    <p>\n     Change the lines that make the SSL server listen on port 443 to make it listen on port 8443:\n    </p>\n    <blockquote>\n     <code>\n      listen [::]:8443 ssl ipv6only=on; # managed by Certbot\n      <br/>\n      listen 8443 ssl; # managed by Certbot\n     </code>\n    </blockquote>\n    <p>\n     Save the default site definition file. Restart Nginx to make this change take effect:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart nginx\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-2\">\n     </a>\n     3.2. Download Cloak\n    </h3>\n    <p>\n     Open a browser on your PC and visit the\n     <a href=\"https://github.com/cbeuw/Cloak/releases\" target=\"_blank\">\n      GitHub Cloak releases page\n     </a>\n     . Determine the version number of the latest release. For example, right now it is\n     <code>\n      2.5.4\n     </code>\n     .\n    </p>\n    <p>\n     On your server, download the latest binary for 64-bit Linux:\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/cbeuw/Cloak/releases/download/v2.5.4/ck-server-linux-amd64-v2.5.4\n     </code>\n    </blockquote>\n    <p>\n     Copy the binary into a directory in your path with the name\n     <code>\n      ck-server\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      cp ck-server-linux-amd64-v2.5.4 /usr/local/bin/ck-server\n     </code>\n    </blockquote>\n    <p>\n     Make\n     <code>\n      ck-server\n     </code>\n     executable:\n    </p>\n    <blockquote>\n     <code>\n      chmod +x /usr/local/bin/ck-server\n     </code>\n    </blockquote>\n    <p>\n     Allow Cloak to bind to privileged ports (i.e. TCP/IP port numbers below 1024):\n    </p>\n    <blockquote>\n     <code>\n      setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/ck-server\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-3\">\n     </a>\n     3.3. Generate Public-Private Key Pair\n    </h3>\n    <p>\n     Generate a public-private key pair:\n    </p>\n    <blockquote>\n     <code>\n      ck-server -k\n     </code>\n    </blockquote>\n    <p>\n     The public key and private key are delivered, separated by a comma. Here is an example of what the result might look like:\n    </p>\n    <blockquote>\n     <code>\n      eRx9vO3x8i1hJ9PucrnlUsN74J/g7MPLymUJCrrQJVM=,MF2tHiGXjP3P3fIIxjt02un2G0qtXdbArmrWsTfz7FM=\n     </code>\n    </blockquote>\n    <ul>\n     <li>\n      The base-64 string\n      <em>\n       before\n      </em>\n      the comma is the\n      <em>\n       public\n      </em>\n      key, to be given to users\n     </li>\n     <li>\n      The base-64 string\n      <em>\n       after\n      </em>\n      the comma is the\n      <em>\n       private\n      </em>\n      key, to be kept on the server\n     </li>\n    </ul>\n    <h3>\n     <a id=\"3-4\">\n     </a>\n     3.4. Generate Administrator Id\n    </h3>\n    <p>\n     Generate a secret identifier for the administrator like this:\n    </p>\n    <blockquote>\n     <code>\n      ck-server -u\n     </code>\n    </blockquote>\n    <p>\n     It will produce a base-64 string that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      SI6bHNp9+Mlc0+/LxhhYig==\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-5\">\n     </a>\n     3.5. Generate User Id\n    </h3>\n    <p>\n     Generate an identifier for an ordinary user. We will make this user have no bandwidth or credit limit restrictions.\n    </p>\n    <blockquote>\n     <code>\n      ck-server -u\n     </code>\n    </blockquote>\n    <p>\n     The command will produce a base-64 string that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      lNEQtGxl6BgYmVg9N5kBRA==\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-6\">\n     </a>\n     3.6. Configure Cloak\n    </h3>\n    <p>\n     For your reference, there is a\n     <a href=\"https://github.com/cbeuw/Cloak/blob/master/example_config/ckserver.json\" target=\"_blank\">\n      sample configuration file on GitHub\n     </a>\n     .\n    </p>\n    <p>\n     Create a directory for Cloak:\n    </p>\n    <blockquote>\n     <code>\n      mkdir /etc/cloak\n     </code>\n    </blockquote>\n    <p>\n     Edit your server’s configuration file for Cloak:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/cloak/ckserver.json\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like the example below, substituting in your user id, private key, and administrator id:\n    </p>\n    <pre>{\n  \"ProxyBook\": {\n    \"tor\": [\n      \"tcp\",\n      \"127.0.0.1:9001\"\n    ]\n  },\n  \"BindAddr\": [\n    \":443\"\n  ],\n  \"BypassUID\": [\n    \"lNEQtGxl6BgYmVg9N5kBRA==\"\n  ],\n  \"RedirAddr\": \"127.0.0.1:8443\",\n  \"PrivateKey\": \"MF2tHiGXjP3P3fIIxjt02un2G0qtXdbArmrWsTfz7FM=\",\n  \"AdminUID\": \"SI6bHNp9+Mlc0+/LxhhYig==\",\n  \"DatabasePath\": \"/etc/cloak/userinfo.db\",\n  \"StreamTimeout\": 300\n}</pre>\n    <ul>\n     <li>\n      <code>\n       ProxyBook\n      </code>\n      tells Cloak where to forward authenticated proxy traffic to, which for us is Tor on port\n      <code>\n       9001\n      </code>\n     </li>\n     <li>\n      <code>\n       BindAddr\n      </code>\n      is a list of addresses Cloak will bind and listen to, which for us is\n      <code>\n       443\n      </code>\n     </li>\n     <li>\n      <code>\n       BypassUID\n      </code>\n      is a list of UIDs that are authorised without any bandwidth or credit limit restrictions\n     </li>\n     <li>\n      <code>\n       RedirAddr\n      </code>\n      is the redirection address when the incoming traffic is not from an authenticated Cloak client\n     </li>\n     <li>\n      <code>\n       PrivateKey\n      </code>\n      is the static curve25519 Diffie-Hellman private key encoded in base-64\n     </li>\n     <li>\n      <code>\n       AdminUID\n      </code>\n      is the user id of the admin user in base-64\n     </li>\n     <li>\n      <code>\n       DatabasePath\n      </code>\n      is the path to\n      <code>\n       userinfo.db\n      </code>\n      (if\n      <code>\n       userinfo.db\n      </code>\n      doesn’t exist in this directory, Cloak will create one automatically)\n     </li>\n     <li>\n      <code>\n       StreamTimeout\n      </code>\n      is the number of seconds of no sent data after which the incoming Cloak client connection will be terminated\n     </li>\n    </ul>\n    <p>\n     Save the Cloak server configuration file.\n    </p>\n    <h3>\n     <a id=\"3-7\">\n     </a>\n     3.7. Configure Systemd for Cloak\n    </h3>\n    <p>\n     Create a systemd service file, so that we can make Cloak start after every reboot and run continually as a service:\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/lib/systemd/system/cloak.service\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like this:\n    </p>\n    <blockquote>\n     <code>\n      [Unit]\n      <br/>\n      Description=Cloak Server\n      <br/>\n      After=network.target\n      <br/>\n      <br/>\n      [Service]\n      <br/>\n      Type=simple\n      <br/>\n      ExecStart=/usr/local/bin/ck-server -c /etc/cloak/ckserver.json\n      <br/>\n      Restart=on-failure\n      <br/>\n      <br/>\n      [Install]\n      <br/>\n      WantedBy=multi-user.target\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"3-8\">\n     </a>\n     3.8. Run Cloak\n    </h3>\n    <p>\n     Make Cloak start after every reboot and run continually as a service:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable cloak\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start cloak\n     </code>\n    </blockquote>\n    <p>\n     Check the status of the Cloak service:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status cloak\n     </code>\n    </blockquote>\n    <p>\n     The above command should show that Cloak is\n     <code>\n      active (running)\n     </code>\n     .\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep 443\n     </code>\n    </blockquote>\n    <p>\n     The above command should show that:\n    </p>\n    <ul>\n     <li>\n      Cloak (\n      <code>\n       ck-server\n      </code>\n      ) is listening on port 443\n     </li>\n     <li>\n      Nginx is listening in port 8443\n     </li>\n    </ul>\n    <p>\n     Your work on the server is done for now, so exit your SSH session with the server:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-9\">\n     </a>\n     3.9. Check from PC\n    </h3>\n    <p>\n     From your PC, check what an unauthorized visitor to your server would see. In our example, the address to put into your browser would be:\n    </p>\n    <blockquote>\n     <code>\n      https://zzz.yyyyy.xyz\n     </code>\n    </blockquote>\n    <p>\n     You should see an ordinary looking website.\n    </p>\n    <h2>\n     <a id=\"4\">\n     </a>\n     4. Set Up Debian/Ubuntu Client\n    </h2>\n    <p>\n     Now work on your PC, which in this tutorial is running Ubuntu 21.04. The procedure for a Debian PC will be very similar.\n    </p>\n    <h3>\n     <a id=\"4-1\">\n     </a>\n     4.1. Download Cloak Client\n    </h3>\n    <p>\n     In Firefox, go to\n     <a href=\"https://github.com/cbeuw/Cloak/releases\" target=\"_blank\">\n      GitHub\n     </a>\n     and determine the latest version of Cloak. We will use version\n     <code>\n      2.5.4\n     </code>\n     as our example.\n    </p>\n    <p>\n     Still in your browser, download\n     <code>\n      ck-client-linux-amd64-v2.5.4\n     </code>\n     from GitHub to your PC’s\n     <code>\n      Downloads\n     </code>\n     directory.\n    </p>\n    <p>\n     Now switch to the terminal on your Debian/Ubuntu PC. Copy the binary into a directory that is in your path:\n    </p>\n    <blockquote>\n     <code>\n      sudo cp ~/Downloads/ck-client-linux-amd64-v2.5.4 /usr/local/bin/ck-client\n     </code>\n    </blockquote>\n    <p>\n     Make\n     <code>\n      ck-client\n     </code>\n     executable:\n    </p>\n    <blockquote>\n     <code>\n      sudo chmod +x /usr/local/bin/ck-client\n     </code>\n    </blockquote>\n    <img alt=\"Downloading Cloak client\" src=\"../images/tc-cloak-client.png\"/>\n    <h3>\n     <a id=\"4-2\">\n     </a>\n     4.2. Configure Cloak Client\n    </h3>\n    <p>\n     For your reference, there is a sample client configuration file on\n     <a href=\"https://github.com/cbeuw/Cloak/blob/master/example_config/ckclient.json\" target=\"_blank\">\n      GitHub\n     </a>\n     .\n    </p>\n    <p>\n     Edit your client’s configuration file for Cloak:\n    </p>\n    <blockquote>\n     <code>\n      vi ~/ckclient.json\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like the example below, substituting in your user id, public key, and hostname:\n    </p>\n    <pre>{\n  \"Transport\": \"direct\",\n  \"ProxyMethod\": \"tor\",\n  \"EncryptionMethod\": \"aes-gcm\",\n  \"UID\": \"lNEQtGxl6BgYmVg9N5kBRA==\",\n  \"PublicKey\": \"eRx9vO3x8i1hJ9PucrnlUsN74J/g7MPLymUJCrrQJVM=\",\n  \"ServerName\": \"zzz.yyyyy.xyz\",\n  \"NumConn\": 4,\n  \"BrowserSig\": \"firefox\",\n  \"StreamTimeout\": 300\n}</pre>\n    <img alt=\"Cloak client configuration\" src=\"../images/tc-cloak-config.png\"/>\n    <ul>\n     <li>\n      <code>\n       Transport\n      </code>\n      can be either direct or CDN\n     </li>\n     <li>\n      <code>\n       ProxyMethod\n      </code>\n      is the name of the proxy method you are using\n     </li>\n     <li>\n      <code>\n       EncryptionMethod\n      </code>\n      is the name of the encryption algorithm you want Cloak to use, over and above the encryption in the proxy method (to avoid fingerprinting of Tor, you must not leave this as\n      <code>\n       plain\n      </code>\n      )\n     </li>\n     <li>\n      <code>\n       UID\n      </code>\n      is your user id in base-64\n     </li>\n     <li>\n      <code>\n       PublicKey\n      </code>\n      is the static curve25519 public key, given by the server admin\n     </li>\n     <li>\n      <code>\n       ServerName\n      </code>\n      is the domain you want to make your ISP or firewall think you are visiting\n     </li>\n     <li>\n      <code>\n       NumConn\n      </code>\n      is the amount of underlying TCP connections you want to use\n     </li>\n     <li>\n      <code>\n       BrowserSig\n      </code>\n      is the browser you want to appear to be using\n     </li>\n     <li>\n      <code>\n       StreamTimeout\n      </code>\n      is the number of seconds of no sent data after which the incoming proxy connection will be terminated\n     </li>\n    </ul>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"4-3\">\n     </a>\n     4.3. Configure Systemd for Cloak\n    </h3>\n    <p>\n     Create a systemd service file, so that we can make Cloak start after every reboot and run continually as a service:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /usr/lib/systemd/system/cloak.service\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like this.\n    </p>\n    <ul>\n     <li>\n      Replace\n      <code>\n       yourname\n      </code>\n      by your actual user name on the PC.\n     </li>\n     <li>\n      Replace\n      <code>\n       zz.zz.zz.zz\n      </code>\n      by your actual server IP address.\n     </li>\n    </ul>\n    <blockquote>\n     <code>\n      [Unit]\n      <br/>\n      Description=Cloak Client\n      <br/>\n      After=network.target\n      <br/>\n      <br/>\n      [Service]\n      <br/>\n      Type=simple\n      <br/>\n      ExecStart=/usr/local/bin/ck-client -c /home/yourname/ckclient.json -s zz.zz.zz.zz\n      <br/>\n      Restart=on-failure\n      <br/>\n      <br/>\n      [Install]\n      <br/>\n      WantedBy=multi-user.target\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"4-4\">\n     </a>\n     4.4. Download Tor Browser\n    </h3>\n    <p>\n     Open Firefox. Download the 64-bit Linux version of Tor Browser in your language from\n     <a href=\"https://www.torproject.org/download/languages\" target=\"_blank\">\n      Tor Project website\n     </a>\n     . For example, for English this would be the file\n     <code>\n      tor-browser-linux64-10.0.17_en-US.tar.xz\n     </code>\n     .\n    </p>\n    <p>\n     Open a terminal, and decompress the archive like this:\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      tar -xf tor-browser-linux64-10.0.17_en-US.tar.xz\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-5\">\n     </a>\n     4.5. Install Tor Browser\n    </h3>\n    <p>\n     Issue the commands:\n    </p>\n    <blockquote>\n     <code>\n      cd tor-browser_en-US\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./start-tor-browser.desktop --register-app\n     </code>\n    </blockquote>\n    <img alt=\"Installing Tor Browser on Debian/Ubuntu\" src=\"../images/tc-install-tb.png\"/>\n    <h3>\n     <a id=\"4-6\">\n     </a>\n     4.6. Run Cloak\n    </h3>\n    <p>\n     Issue these commands in turn:\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl enable cloak\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo systemctl start cloak\n     </code>\n    </blockquote>\n    <p>\n     Check that Cloak is active and listening on port 1984:\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl status cloak\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo ss -tulpn | grep 1984\n     </code>\n    </blockquote>\n    <img alt=\"Cloak client running on Linux\" src=\"../images/tc-cloak-running.png\"/>\n    <h3>\n     <a id=\"4-7\">\n     </a>\n     4.7. Run Tor Browser\n    </h3>\n    <p>\n     In GNOME desktop, open\n     <strong>\n      Activities\n     </strong>\n     , or press the “Super” key (looks like a Windows icon). Search for\n     <strong>\n      Tor Browser\n     </strong>\n     . (You can, if you wish, add Tor Browser to your Favorites bar after opening it.)\n    </p>\n    <p>\n     The first time you open Tor Browser, you must configure it.\n    </p>\n    <ol>\n     <li>\n      Click\n      <strong>\n       Configure\n      </strong>\n     </li>\n     <li>\n      Check\n      <strong>\n       Tor is censored in my country\n      </strong>\n     </li>\n     <li>\n      Select\n      <strong>\n       Provide a bridge I know\n      </strong>\n     </li>\n     <li>\n      Enter\n      <code>\n       127.0.0.1:1984\n      </code>\n     </li>\n     <li>\n      Click\n      <strong>\n       Connect\n      </strong>\n      .\n     </li>\n    </ol>\n    <h3>\n     <a id=\"4-8\">\n     </a>\n     4.8. End-to-End Test\n    </h3>\n    <p>\n     In Tor Browser, visit\n     <a href=\"https://check.torproject.org\" target=\"_blank\">\n      https://check.torproject.org\n     </a>\n     .\n    </p>\n    <img alt=\"Check Tor access via Cloak\" src=\"../images/tor-cloak.png\"/>\n    <h2>\n     <a id=\"5\">\n     </a>\n     5. Get Help and Report Issues\n    </h2>\n    <ul>\n     <li>\n      You can find out more about Cloak in the\n      <a href=\"https://github.com/cbeuw/Cloak/blob/master/README.md\" target=\"_blank\">\n       README on GitHub\n      </a>\n     </li>\n     <li>\n      You can ask general questions about Cloak on\n      <a href=\"https://ntc.party/c/community-software/cloak/21\" target=\"_blank\">\n       ntc.party\n      </a>\n     </li>\n     <li>\n      For Cloak issues, post in the\n      <strong>\n       Issues\n      </strong>\n      section for\n      <a href=\"https://github.com/cbeuw/Cloak/issues\" target=\"_blank\">\n       Cloak on GitHub\n      </a>\n     </li>\n     <li>\n      You can ask Tor questions on\n      <a href=\"https://www.reddit.com/r/tor\" target=\"_blank\">\n       Reddit\n      </a>\n      or\n      <a href=\"https://tor.stackexchange.com\" target=\"_blank\">\n       Stack Exchange\n      </a>\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2021-06-19\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}