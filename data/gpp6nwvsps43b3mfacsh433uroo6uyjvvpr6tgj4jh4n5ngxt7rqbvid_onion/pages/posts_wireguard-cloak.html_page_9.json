{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   WireGuard + Cloak\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     WireGuard + Cloak\n    </h1>\n    <p>\n     Cloak disguises a proxy or VPN server as a web server in order to evade deep packet inspection (DPI). The disguised server secretly implements Shadowsocks, OpenVPN, or Tor. This post describes an experimental implementation in which Cloak obfuscates a WireGuard server. WireGuard and Cloak run on a Debian 11 server. In the examples, we give the server IP address as\n     <code>\n      168.168.168.168\n     </code>\n     . We end the tutorial by describing the procedure for setting up a Windows client.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Open Firewall\n    </h2>\n    <p>\n     Firewalls are typically implemented with\n     <code>\n      nftables\n     </code>\n     ,\n     <code>\n      iptables\n     </code>\n     ,\n     <code>\n      ufw\n     </code>\n     ,\n     <code>\n      firewalld\n     </code>\n     , or security groups. Whichever one you are using, you will need to open ports\n     <code>\n      80\n     </code>\n     and\n     <code>\n      443\n     </code>\n     for\n     <code>\n      TCP\n     </code>\n     input and persist your changes across reboots.\n    </p>\n    <p>\n     An example for\n     <code>\n      iptables\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 80 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install iptables-persistent\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Install WireGuard on Server\n    </h2>\n    <p>\n     Install WireGuard using the\n     <code>\n      angristan\n     </code>\n     script:\n    </p>\n    <blockquote>\n     <code>\n      curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      chmod +x wireguard-install.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./wireguard-install.sh\n     </code>\n    </blockquote>\n    <p>\n     Answer the questions that the script prompts you for. You can accept the defaults or enter your own values. In the example that follows, all the values were defaults except for the port number of\n     <code>\n      51820\n     </code>\n     .\n    </p>\n    <ul>\n     <li>\n      <code>\n       IPv4 or IPv6 public address: 168.168.168.168\n      </code>\n     </li>\n     <li>\n      <code>\n       Public interface: eth0\n      </code>\n     </li>\n     <li>\n      <code>\n       WireGuard interface name: wg0\n      </code>\n     </li>\n     <li>\n      <code>\n       Server's WireGuard IPv4: 10.66.66.1\n      </code>\n     </li>\n     <li>\n      <code>\n       Server's WireGuard IPv6: fd42:42:42::1\n      </code>\n     </li>\n     <li>\n      <code>\n       Server's WireGuard port [1-65535]: 51820\n      </code>\n     </li>\n     <li>\n      <code>\n       First DNS resolver to use for the clients: 94.140.14.14\n      </code>\n     </li>\n     <li>\n      <code>\n       Second DNS resolver to use for the clients (optional): 94.140.15.15\n      </code>\n     </li>\n    </ul>\n    <p>\n     At the end of the script, enter your choices for the first WireGuard client:\n    </p>\n    <ul>\n     <li>\n      <code>\n       Client name: pc\n      </code>\n     </li>\n     <li>\n      <code>\n       Client's WireGuard IPv4: 10.66.66.2\n      </code>\n     </li>\n     <li>\n      <code>\n       Client's WireGuard IPv6: fd42:42:42::2\n      </code>\n     </li>\n    </ul>\n    <p>\n     The script creates a server configuration file\n     <code>\n      /etc/wireguard/wg0.conf\n     </code>\n     that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      [Interface]\n      <br/>\n      Address = 10.66.66.1/24,fd42:42:42::1/64\n      <br/>\n      ListenPort = 51820\n      <br/>\n      PrivateKey = 8K/fTquVOSHxSmNnMY8dbvfpgbiXMEozf7WcPW8942o=\n      <br/>\n      PostUp = iptables -A FORWARD -i eth0 -o wg0 -j ACCEPT; iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n      <br/>\n      PostDown = iptables -D FORWARD -i eth0 -o wg0 -j ACCEPT; iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n      <br/>\n      <br/>\n      ### Client pc\n      <br/>\n      [Peer]\n      <br/>\n      PublicKey = 5w1dNTg10Nw1XXLmEn4+4SajwX7xgSftH8TayfFrdA8=\n      <br/>\n      PresharedKey = 0fEJF/W0Rb6OhAdZ5/ptOXkNkRBk08OyVA0jiGvtFI0=\n      <br/>\n      AllowedIPs = 10.66.66.2/32,fd42:42:42::2/128\n     </code>\n    </blockquote>\n    <p>\n     The script also creates a first client configuration file\n     <code>\n      /root/wg0-client-pc.conf\n     </code>\n     that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      [Interface]\n      <br/>\n      PrivateKey = eOh9TSSHqhkenmifQ9T8pNkSJ99lgSrBZ2Q1wqdLk0Q=\n      <br/>\n      Address = 10.66.66.2/32,fd42:42:42::2/128\n      <br/>\n      DNS = 94.140.14.14,94.140.15.15\n      <br/>\n      <br/>\n      [Peer]\n      <br/>\n      PublicKey = LOOwb20PN1hQh0wKZ8qVZCE5EKlolsPwNI7IUOyR1EQ=\n      <br/>\n      PresharedKey = 0fEJF/W0Rb6OhAdZ5/ptOXkNkRBk08OyVA0jiGvtFI0=\n      <br/>\n      Endpoint = 107.161.24.219:51820\n      <br/>\n      AllowedIPs = 0.0.0.0/0,::/0\n     </code>\n    </blockquote>\n    <p>\n     You can check that the script has set the systemd service running with the command:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status wg-quick@wg0\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Install Cloak on Server\n    </h2>\n    <h3>\n     <a id=\"3-1\">\n     </a>\n     3.1. Download Cloak\n    </h3>\n    <p>\n     Open a browser on your PC and visit the\n     <a href=\"https://github.com/cbeuw/Cloak/releases\" target=\"_blank\">\n      GitHub Cloak releases page\n     </a>\n     . Determine the version number of the latest release. For example, right now it is\n     <code>\n      2.6.0\n     </code>\n     .\n    </p>\n    <p>\n     On your server, download the latest binary for 64-bit Linux. For example, for\n     <code>\n      2.6.0\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/cbeuw/Cloak/releases/download/v2.6.0/ck-server-linux-amd64-v2.6.0\n     </code>\n    </blockquote>\n    <p>\n     If this gives a temporary failure in name resolution, reboot and try again.\n    </p>\n    <p>\n     Copy the binary into a directory in your path with the name\n     <code>\n      ck-server\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      cp ck-server-linux-amd64-v2.6.0 /usr/local/bin/ck-server\n     </code>\n    </blockquote>\n    <p>\n     Make\n     <code>\n      ck-server\n     </code>\n     executable:\n    </p>\n    <blockquote>\n     <code>\n      chmod +x /usr/local/bin/ck-server\n     </code>\n    </blockquote>\n    <p>\n     Allow Cloak to bind to privileged ports (i.e. TCP/IP port numbers below 1024):\n    </p>\n    <blockquote>\n     <code>\n      setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/ck-server\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-2\">\n     </a>\n     3.2. Generate Public-Private Key Pair\n    </h3>\n    <p>\n     Generate a public-private key pair:\n    </p>\n    <blockquote>\n     <code>\n      ck-server -k\n     </code>\n    </blockquote>\n    <p>\n     The public key and private key are delivered, separated by a comma. Here is an example of what the result might look like:\n    </p>\n    <blockquote>\n     <code>\n      EjzZwdesObTyBWW9rI97uyztwK+4XFlDxxSrv9qyNFU=,cL2kY7rvneraJTyqbjy33rDAC/DQ3hyamRPAVolqgnI=\n     </code>\n    </blockquote>\n    <ul>\n     <li>\n      The base-64 string\n      <em>\n       before\n      </em>\n      the comma is the\n      <em>\n       public\n      </em>\n      key, to be given to users\n     </li>\n     <li>\n      The base-64 string\n      <em>\n       after\n      </em>\n      the comma is the\n      <em>\n       private\n      </em>\n      key, to be kept on the server\n     </li>\n    </ul>\n    <h3>\n     <a id=\"3-3\">\n     </a>\n     3.3. Generate Administrator Id\n    </h3>\n    <p>\n     Generate a secret identifier for the administrator like this:\n    </p>\n    <blockquote>\n     <code>\n      ck-server -u\n     </code>\n    </blockquote>\n    <p>\n     It will produce a base-64 string that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      OuFKRCChbpTWrR1JXVg0ag==\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-4\">\n     </a>\n     3.4. Generate User Id\n    </h3>\n    <p>\n     Generate an identifier for an ordinary user. We will make this user have no bandwidth or credit limit restrictions.\n    </p>\n    <blockquote>\n     <code>\n      ck-server -u\n     </code>\n    </blockquote>\n    <p>\n     The command will produce a base-64 string that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      JXD42BdCNynBeKq+G0KbFA==\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-5\">\n     </a>\n     3.5. Configure Cloak\n    </h3>\n    <p>\n     For your reference, there is a\n     <a href=\"https://github.com/cbeuw/Cloak/blob/master/example_config/ckserver.json\" target=\"_blank\">\n      sample configuration file on GitHub\n     </a>\n     .\n    </p>\n    <p>\n     Create a directory for Cloak:\n    </p>\n    <blockquote>\n     <code>\n      mkdir /etc/cloak\n     </code>\n    </blockquote>\n    <p>\n     Edit your server’s configuration file for Cloak:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/cloak/ckserver.json\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like the example below, substituting in your user id, private key, and administrator id:\n    </p>\n    <pre>{\n  \"ProxyBook\": {\n    \"wireguard\": [\n      \"udp\",\n      \"127.0.0.1:51820\"\n    ]\n  },\n  \"BindAddr\": [\n    \":80\",\n    \":443\"\n  ],\n  \"BypassUID\": [\n    \"JXD42BdCNynBeKq+G0KbFA==\"\n  ],\n  \"RedirAddr\": \"www.bing.com\",\n  \"PrivateKey\": \"cL2kY7rvneraJTyqbjy33rDAC/DQ3hyamRPAVolqgnI=\",\n  \"AdminUID\": \"OuFKRCChbpTWrR1JXVg0ag==\",\n  \"DatabasePath\": \"/etc/cloak/userinfo.db\",\n  \"StreamTimeout\": 300\n}</pre>\n    <ul>\n     <li>\n      <code>\n       ProxyBook\n      </code>\n      tells Cloak where to forward authenticated proxy traffic to, which for us is WireGuard on port\n      <code>\n       udp/51820\n      </code>\n     </li>\n     <li>\n      <code>\n       BindAddr\n      </code>\n      is a list of addresses Cloak will bind and listen to, which for us is\n      <code>\n       443\n      </code>\n     </li>\n     <li>\n      <code>\n       BypassUID\n      </code>\n      is a list of UIDs that are authorised without any bandwidth or credit limit restrictions\n     </li>\n     <li>\n      <code>\n       RedirAddr\n      </code>\n      is the redirection address when the incoming traffic is not from an authenticated Cloak client\n     </li>\n     <li>\n      <code>\n       PrivateKey\n      </code>\n      is the static curve25519 Diffie-Hellman private key encoded in base-64\n     </li>\n     <li>\n      <code>\n       AdminUID\n      </code>\n      is the user id of the admin user in base-64\n     </li>\n     <li>\n      <code>\n       DatabasePath\n      </code>\n      is the path to\n      <code>\n       userinfo.db\n      </code>\n      (if\n      <code>\n       userinfo.db\n      </code>\n      doesn’t exist in this directory, Cloak will create one automatically)\n     </li>\n     <li>\n      <code>\n       StreamTimeout\n      </code>\n      is the number of seconds of no sent data after which the incoming Cloak client connection will be terminated\n     </li>\n    </ul>\n    <p>\n     Save the Cloak server configuration file.\n    </p>\n    <h3>\n     <a id=\"3-6\">\n     </a>\n     3.6. Configure Systemd for Cloak\n    </h3>\n    <p>\n     Create a systemd service file, so that we can make Cloak start after every reboot and run continually as a service:\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/lib/systemd/system/cloak.service\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like this:\n    </p>\n    <blockquote>\n     <code>\n      [Unit]\n      <br/>\n      Description=Cloak Server\n      <br/>\n      After=network.target\n      <br/>\n      <br/>\n      [Service]\n      <br/>\n      Type=simple\n      <br/>\n      ExecStart=/usr/local/bin/ck-server -c /etc/cloak/ckserver.json\n      <br/>\n      Restart=on-failure\n      <br/>\n      <br/>\n      [Install]\n      <br/>\n      WantedBy=multi-user.target\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"3-7\">\n     </a>\n     3.7. Run Cloak\n    </h3>\n    <p>\n     Make Cloak start after every reboot and run continually as a service:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable cloak\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start cloak\n     </code>\n    </blockquote>\n    <p>\n     Check the status of the Cloak service:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status cloak\n     </code>\n    </blockquote>\n    <p>\n     The above command should show that Cloak is\n     <code>\n      active (running)\n     </code>\n     . Type\n     <code>\n      q\n     </code>\n     to quit the status display. Check that Cloak server is listening:\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep ck\n     </code>\n    </blockquote>\n    <p>\n     The above command should show that Cloak (\n     <code>\n      ck-server\n     </code>\n     ) is listening on ports\n     <code>\n      80\n     </code>\n     and\n     <code>\n      443\n     </code>\n     .\n    </p>\n    <p>\n     Your work on the server is done for now, so exit your SSH session with the server:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"4\">\n     </a>\n     4. Set Up Windows Client\n    </h2>\n    <p>\n     Now work on your PC, which in this tutorial is running Windows.\n    </p>\n    <h3>\n     <a id=\"4-1\">\n     </a>\n     4.1. Download Cloak Client\n    </h3>\n    <p>\n     In your browser, visit\n     <a href=\"https://github.com/cbeuw/Cloak/releases\" target=\"_blank\">\n      GitHub\n     </a>\n     and determine the latest version of Cloak. We will use version\n     <code>\n      2.6.0\n     </code>\n     as our example.\n    </p>\n    <p>\n     Download\n     <code>\n      ck-client-windows-amd64-v2.6.0.exe\n     </code>\n     from GitHub to your PC’s\n     <code>\n      Downloads\n     </code>\n     directory.\n    </p>\n    <h3>\n     <a id=\"4-2\">\n     </a>\n     4.2. Configure Cloak Client\n    </h3>\n    <p>\n     For your reference, there is a sample client configuration file on\n     <a href=\"https://github.com/cbeuw/Cloak/blob/master/example_config/ckclient.json\" target=\"_blank\">\n      GitHub\n     </a>\n     .\n    </p>\n    <p>\n     In the\n     <code>\n      Downloads\n     </code>\n     folder, create a client configuration file for Cloak named\n     <code>\n      ckclient.json\n     </code>\n     . You can use Notepad or Notepad++ to edit the file. Insert contents like the example below, substituting in your\n     <code>\n      UID\n     </code>\n     and\n     <code>\n      PublicKey\n     </code>\n     .\n    </p>\n    <p>\n     This example has\n     <code>\n      EncryptionMethod\n     </code>\n     as\n     <code>\n      plain\n     </code>\n     for simplicity, but in the real world you would change it to\n     <code>\n      aes-gcm\n     </code>\n     or\n     <code>\n      chacha20-poly1305\n     </code>\n     .\n    </p>\n    <pre>{\n  \"Transport\": \"direct\",\n  \"ProxyMethod\": \"wireguard\",\n  \"EncryptionMethod\": \"plain\",\n  \"UID\": \"JXD42BdCNynBeKq+G0KbFA==\",\n  \"PublicKey\": \"EjzZwdesObTyBWW9rI97uyztwK+4XFlDxxSrv9qyNFU=\",\n  \"ServerName\": \"www.bing.com\",\n  \"NumConn\": 4,\n  \"BrowserSig\": \"firefox\",\n  \"StreamTimeout\": 300\n}</pre>\n    <ul>\n     <li>\n      <code>\n       Transport\n      </code>\n      can be either direct or CDN\n     </li>\n     <li>\n      <code>\n       ProxyMethod\n      </code>\n      is the name of the proxy method you are using\n     </li>\n     <li>\n      <code>\n       EncryptionMethod\n      </code>\n      is the name of the encryption algorithm you want Cloak to use, over and above the encryption in the proxy method\n     </li>\n     <li>\n      <code>\n       UID\n      </code>\n      is your user id in base-64\n     </li>\n     <li>\n      <code>\n       PublicKey\n      </code>\n      is the static curve25519 public key, given by the server admin\n     </li>\n     <li>\n      <code>\n       ServerName\n      </code>\n      is the domain you want to make your ISP or firewall think you are visiting\n     </li>\n     <li>\n      <code>\n       NumConn\n      </code>\n      is the amount of underlying TCP connections you want to use\n     </li>\n     <li>\n      <code>\n       BrowserSig\n      </code>\n      is the browser you want to appear to be using\n     </li>\n     <li>\n      <code>\n       StreamTimeout\n      </code>\n      is the number of seconds of no sent data after which the incoming proxy connection will be terminated\n     </li>\n    </ul>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"4-3\">\n     </a>\n     4.3. Install WireGuard for Windows Client\n    </h3>\n    <p>\n     Download WireGuard for Windows installer from\n     <a href=\"https://www.wireguard.com/install\" target=\"_blank\">\n      https://www.wireguard.com/install\n     </a>\n     .\n    </p>\n    <p>\n     Run the installer.\n    </p>\n    <p>\n     Add a new tunnel like the one below. Note that the endpoint has been changed to be localhost (\n     <code>\n      127.0.0.1\n     </code>\n     ) port\n     <code>\n      1984\n     </code>\n     , not the remote server!\n    </p>\n    <blockquote>\n     <code>\n      [Interface]\n      <br/>\n      PrivateKey = eOh9TSSHqhkenmifQ9T8pNkSJ99lgSrBZ2Q1wqdLk0Q=\n      <br/>\n      Address = 10.66.66.2/32,fd42:42:42::2/128\n      <br/>\n      DNS = 94.140.14.14,94.140.15.15\n      <br/>\n      <br/>\n      [Peer]\n      <br/>\n      PublicKey = LOOwb20PN1hQh0wKZ8qVZCE5EKlolsPwNI7IUOyR1EQ=\n      <br/>\n      PresharedKey = 0fEJF/W0Rb6OhAdZ5/ptOXkNkRBk08OyVA0jiGvtFI0=\n      <br/>\n      Endpoint = 127.0.0.1:1984\n      <br/>\n      AllowedIPs = 0.0.0.0/0,::/0\n     </code>\n    </blockquote>\n    <p>\n     Uncheck the\n     <strong>\n      Block untunneled traffic (kill-switch)\n     </strong>\n     checkbox.\n    </p>\n    <h3>\n     <a id=\"4-4\">\n     </a>\n     4.4. Add Route to Server\n    </h3>\n    <p>\n     Open a Windows command prompt with\n     <strong>\n      Run as administrator\n     </strong>\n     . Click\n     <strong>\n      Yes\n     </strong>\n     to allow. Add a route to your server via your main interface’s gateway. For example, if your server is at\n     <code>\n      168.168.168.168\n     </code>\n     and your primary gateway is at\n     <code>\n      192.168.122.1\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      route ADD 168.168.168.168 MASK 255.255.255.255 192.168.122.1\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-5\">\n     </a>\n     4.5. Run Cloak Client\n    </h3>\n    <p>\n     Open a Windows Command Prompt window.\n    </p>\n    <p>\n     Change into your\n     <code>\n      Downloads\n     </code>\n     directory:\n    </p>\n    <blockquote>\n     <code>\n      cd Downloads\n     </code>\n    </blockquote>\n    <p>\n     Run Cloak, pointing to your configuration file\n     <code>\n      ckclient.json\n     </code>\n     and your server\n     <code>\n      168.168.168.168\n     </code>\n     , and specifying\n     <code>\n      -u\n     </code>\n     for UDP:\n    </p>\n    <blockquote>\n     <code>\n      ck-client-windows-amd64-v2.6.0.exe -u -c ckclient.json -s 168.168.168.168\n     </code>\n    </blockquote>\n    <p>\n     You will see a message,\n     <code>\n      Listening on UDP 127.0.0.1:1984 for wireguard client\n     </code>\n     . Leave the command prompt window open, with Cloak running in it.\n    </p>\n    <h3>\n     <a id=\"4-6\">\n     </a>\n     4.6. Connect WireGuard Client to Server\n    </h3>\n    <p>\n     <strong>\n      Activate\n     </strong>\n     your WireGuard tunnel.\n    </p>\n    <p>\n     In the Cloak window, you will see messages\n     <code>\n      Attempting to start a new session\n     </code>\n     and\n     <code>\n      Session 123456789 established\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"4-7\">\n     </a>\n     4.7. End-to-End Test\n    </h3>\n    <p>\n     Check the end-to-end functionality to confirm that TunSafe and Cloak are both configured correctly. Visit\n     <a href=\"https://ipchicken.com\" target=\"_blank\">\n      IP Chicken\n     </a>\n     . You should see the IP address of the server, not your local client.\n    </p>\n    <h3>\n     <a id=\"4-8\">\n     </a>\n     4.8. Disconnect\n    </h3>\n    <p>\n     Deactive your tunnel in WireGuard for Windows client.\n    </p>\n    <p>\n     Terminate the Cloak client process with\n     <strong>\n      Ctrl\n     </strong>\n     +\n     <strong>\n      c\n     </strong>\n     .\n    </p>\n    <p>\n     Delete the static route to your server:\n    </p>\n    <blockquote>\n     <code>\n      route DELETE 168.168.168.168 MASK 255.255.255.255 192.168.122.1\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"5\">\n     </a>\n     5. Get Help and Report Issues\n    </h2>\n    <ul>\n     <li>\n      For Cloak issues, post in the\n      <strong>\n       Issues\n      </strong>\n      section for\n      <a href=\"https://github.com/cbeuw/Cloak/issues\" target=\"_blank\">\n       Cloak on GitHub\n      </a>\n     </li>\n     <li>\n      For WireGuard, the best place to get help is the\n      <strong>\n       #wireguard\n      </strong>\n      IRC channel on\n      <a href=\"https://web.libera.chat/#wireguard\" target=\"_blank\">\n       libera.chat\n      </a>\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2022-06-09\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}