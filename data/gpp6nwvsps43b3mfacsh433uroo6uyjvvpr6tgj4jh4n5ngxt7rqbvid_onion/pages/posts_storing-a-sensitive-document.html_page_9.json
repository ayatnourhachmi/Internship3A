{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   Storing a Sensitive Document\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     Storing a Sensitive Document\n    </h1>\n    <p>\n     The scenario in this article is that you have a sensitive document that you must hide from an adversary.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Decisions\n    </h2>\n    <p>\n     As always, start with threat analysis. Who are your adversaries, and what do they want? Where are your vulnerabilities? How could you mitigate your risks? The general principle is that every door must have a lock. As you construct your threat model, you will notice you can distinguish between three progressively more difficult tasks:\n    </p>\n    <ul>\n     <li>\n      concealing the contents of the document\n     </li>\n     <li>\n      concealing the location of the document\n     </li>\n     <li>\n      concealing the existence of the document\n     </li>\n    </ul>\n    <p>\n     In some cases, electronic storage will be less safe than the old-fashioned methods. Ask yourself if it would be safer to write down your information on a piece of paper and hide it in a book.\n    </p>\n    <p>\n     If you are going to store your information on a computer, you must take the usual precautions. Your computer should be firewalled and physically secured against adversaries, who could otherwise install keyloggers or rootkits. You must follow the usual advice to computer users, such as not downloading attachments or visiting malicious websites. Standard best practices will not be repeated here.\n    </p>\n    <p>\n     Then you must decide whether your sensitive document will remain locally or whether you will store it on a remote computer system. Local storage would imply something like a VeraCrypt encrypted disk or USB flash drive. With VeraCrypt, a visible encrypted volume can contain within it a hidden encrypted volume, which would be useful in some scenarios. Whether or not this is the best solution for you depends on your threat model. If powerful adversaries managed to break into your office, an encrypted disk would attract attention, even if its contents could not be decrypted. You would need to store your drive or USB stick in a secure place. Despite these disadvantages, the choice of local encrypted storage could be right for you if the major risk were your adversary’s power to monitor or disrupt your communications.\n    </p>\n    <p>\n     Offsite storage would be your choice where a physical search of your premises or devices was the major risk. This is the route we will explore more fully here.\n    </p>\n    <p>\n     Once you have concluded that your sensitive document must be stored off-premises, the next question is where. For some threat models, a commercial cloud provider such as Amazon AWS or Microsoft Azure would suffice. For other threat models, you would want to store your document in a private data center. And in still other situations, you might be looking at more exotic solutions, such as server providers who accept Bitcoin or who operate out of a nuclear bunker in Sweden.\n    </p>\n    <p>\n     With any of these options, you could implement your file store as a Tor hidden service. This would protect your server’s IP address and location, if that mattered to you. It would, though, have several disadvantages. Setting up and using a Tor hidden service needs additional expertise. Version 3 onion addresses are 56 hexadecimal characters long, which is far too long to remember and would itself need to be securely stored somewhere. The hidden service would make more sense if someone else had set up a SecureDrop for you. Even so, Tor is blocked in several countries, and this would necessitate circumvention techniques, such as a\n     <a href=\"proxy-before-tor-whonix.html\">\n      proxy before Tor\n     </a>\n     .\n    </p>\n    <p>\n     A secondary decision would be where and how to store your encryption keys. If your keys are also to be stored off-premises, you would want to store them at a completely separate second location, with a different provider and even in a different country. The key would have to be stored without another round of encryption, since an encrypted key could not be used to decrypt itself. It would be protected only by the strength of your key’s passphrase. It goes without saying that all data transmissions to the off-premise servers would have to be encrypted.\n    </p>\n    <p>\n     If you want to conceal even the very existence of the sensitive document, you might want to erase all traces of your work. In this case, you might do your work in Tails or using a live CD, powering off your computer after you have finished your work.\n    </p>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Practicalities\n    </h2>\n    <p>\n     Now for the practicalities. We will discuss the scenario where the sensitive document, and possibly also your encryption key, are to be stored remotely, with the local copy then deleted.\n    </p>\n    <p>\n     The GNU Privacy Guard (GPG) is already installed on most Linux systems. It is an open-source implementation of the Pretty Good Privacy (PGP) standard, which was originally intended for encrypting emails.\n    </p>\n    <p>\n     Assuming GPG is already installed on your system, start by generating your encryption key:\n    </p>\n    <blockquote>\n     <code>\n      gpg --full-generate-key\n     </code>\n    </blockquote>\n    <p>\n     Press\n     <strong>\n      Enter\n     </strong>\n     to select the default type, which is RSA. Enter\n     <code>\n      4096\n     </code>\n     for the number of bits you want in the key. Press\n     <strong>\n      Enter\n     </strong>\n     to accept the default of a key with no expiry date. Review the details, and enter\n     <code>\n      y\n     </code>\n     if they are correct.\n    </p>\n    <p>\n     Now you are asked for your name and email. GPG was designed for the encryption of emails, so it identifies keys by the email recipient. We’ll use as our example the name of\n     <code>\n      John Doe\n     </code>\n     and the email address\n     <code>\n      john511115@mydomain.com\n     </code>\n     . Press\n     <strong>\n      Enter\n     </strong>\n     to have no descriptive comment in the key. You are prompted to review your choices for identifiers and enter\n     <code>\n      o\n     </code>\n     for okay.\n    </p>\n    <p>\n     Then comes the passphrase. A passphrase can contain spaces as well as characters. It should be easy for you to remember, but difficult for others to guess. We will use as an example:\n    </p>\n    <blockquote>\n     <code>\n      5 elephants are universally trunked\n     </code>\n    </blockquote>\n    <p>\n     Your key’s fingerprint and identifiers are redisplayed after the key is generated. You can bring up a list of the keys in your keyring with the command:\n    </p>\n    <blockquote>\n     <code>\n      gpg --list-keys\n     </code>\n    </blockquote>\n    <p>\n     Let’s suppose that your sensitive document is a file named\n     <code>\n      ~/Documents/Sensitive.odt\n     </code>\n     . To encrypt this file with your key, issue the command:\n    </p>\n    <blockquote>\n     <code>\n      gpg --encrypt -r \"John Doe\" ~/Documents/Sensitive.odt\n     </code>\n    </blockquote>\n    <p>\n     This creates the encrypted file. Its name is formed by appending\n     <code>\n      .gpg\n     </code>\n     to the name of the original file. Continuing with our example, the name of the encrypted file would be\n     <code>\n      ~/Documents/Sensitive.odt.gpg\n     </code>\n     .\n    </p>\n    <p>\n     Now transmit the encrypted file to your offsite storage. How you do this depends on the nature of the storage. For a remote server, you could use\n     <code>\n      sftp\n     </code>\n     or the FileZilla graphical client for\n     <code>\n      sftp\n     </code>\n     . For a storage bucket, you could use the\n     <code>\n      aws s3\n     </code>\n     command.\n    </p>\n    <p>\n     If you’ve decided to also store your encryption key offsite, you must first export it:\n    </p>\n    <blockquote>\n     <code>\n      gpg --export-secret-key -a \"John Doe\" &gt; ~/Documents/John.key\n     </code>\n    </blockquote>\n    <p>\n     You must reenter the passphrase when you export the private key. In our example, that is:\n    </p>\n    <blockquote>\n     <code>\n      5 elephants are universally trunked\n     </code>\n    </blockquote>\n    <p>\n     Then transmit the private key file\n     <code>\n      ~/Documents/John.key\n     </code>\n     to its file store at your second provider.\n    </p>\n    <p>\n     Now, since the whole point is to protect against an adversary who might get hold of your computer, you will want to delete local copies of your file and, if you’re also storing your key offsite, delete your key. Ordinary deleting doesn’t really remove a file from your hard drive. It just erases the pointers to it. We’ll therefore use the\n     <code>\n      srm\n     </code>\n     (secure remove) utility from the\n     <code>\n      secure-delete\n     </code>\n     package. Install it like this:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install secure-delete\n     </code>\n    </blockquote>\n    <p>\n     Securely remove your file and its encrypted version from your local computer:\n    </p>\n    <blockquote>\n     <code>\n      srm -z ~/Documents/Sensitive.odt\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      srm -z ~/Documents/Sensitive.odt.gpg\n     </code>\n    </blockquote>\n    <p>\n     The\n     <code>\n      -z\n     </code>\n     option causes\n     <code>\n      srm\n     </code>\n     to fill the space occupied by the file with binary zeroes. Note that this option has no value for solid-state drives or USB flash devices. These implement a technique called wear leveling, where logical sectors are remapped to physical sectors on every write operation.\n    </p>\n    <p>\n     If you’re also storing the key offsite, then delete both public and private keys from your GPG keyring. Begin by deleting the private key:\n    </p>\n    <blockquote>\n     <code>\n      gpg --delete-secret-key \"John Doe\"\n     </code>\n    </blockquote>\n    <p>\n     You will need to confirm that you really want to delete the key and its subkey. Then delete the public key:\n    </p>\n    <blockquote>\n     <code>\n      gpg --delete-key \"John Doe\"\n     </code>\n    </blockquote>\n    <p>\n     You can confirm that no keys remain in your keyring with the command:\n    </p>\n    <blockquote>\n     <code>\n      gpg --list-keys\n     </code>\n    </blockquote>\n    <p>\n     Now that the key is securely stored offsite, you can also delete your exported copy:\n    </p>\n    <blockquote>\n     <code>\n      srm -z ~/Documents/John.key\n     </code>\n    </blockquote>\n    <p>\n     You might even delete and recreate your GPG keyring, provided it contains no other keys you need to keep.\n    </p>\n    <blockquote>\n     <code>\n      srm -zr ~/.gnupg\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      gpg --list-keys\n     </code>\n    </blockquote>\n    <p>\n     If protecting against forensic analysis matters to you, you might be better doing all your work in Tails. If the original document was stored on a USB flash drive, it should be completely destroyed with a hammer or a drill.\n    </p>\n    <p>\n     What remains at the end of this procedure is your encrypted file on an offsite server and your private key on a second offsite server. All the locations, file names, passwords, and passphrases exist only in your memory. Nothing is stored on your local computer system.\n    </p>\n    <p>\n     When you want to reconstruct your sensitive document at a later date, retrieve both the encrypted file and your secret key from their file stores. Import the secret key to your computer’s GPG keyring like this:\n    </p>\n    <blockquote>\n     <code>\n      gpg --import John.key\n     </code>\n    </blockquote>\n    <p>\n     You are asked for the passphrase, which was:\n    </p>\n    <blockquote>\n     <code>\n      5 elephants are universally trunked\n     </code>\n    </blockquote>\n    <p>\n     Finally, decrypt the encrypted sensitive document:\n    </p>\n    <blockquote>\n     <code>\n      gpg --decrypt ~/Documents/Sensitive.odt.gpg --output ~/Documents/Sensitive.odt\n     </code>\n    </blockquote>\n    <p>\n     Again, you must enter the passphrase before the decryption proceeds. This was:\n    </p>\n    <blockquote>\n     <code>\n      5 elephants are universally trunked\n     </code>\n    </blockquote>\n    <p>\n     Now you have the original, unencrypted, sensitive document. All the time it was stored remotely, there was nothing for your adversary to find locally.\n    </p>\n    <p>\n     <em>\n      Updated 2020-08\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}