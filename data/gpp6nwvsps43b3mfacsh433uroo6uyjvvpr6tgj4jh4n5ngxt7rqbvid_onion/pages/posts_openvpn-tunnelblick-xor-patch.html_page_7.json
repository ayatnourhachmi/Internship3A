{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   OpenVPN + Tunnelblick XOR Patch\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     OpenVPN + Tunnelblick XOR Patch\n    </h1>\n    <p>\n     The XOR patch for OpenVPN comes to us courtesy of the\n     <a href=\"https://tunnelblick.net/cOpenvpn_xorpatch.html\" target=\"_blank\">\n      Tunnelblick team\n     </a>\n     . They state that “the patch is attractive because it is so easy to implement: simply apply the patch to both the OpenVPN server and the OpenVPN client and add a single, identical option to the configuration files for each.” The XOR patch is automatically included in Tunnelblick OpenVPN software for macOS.\n    </p>\n    <p>\n     This article will show you how to install and configure OpenVPN with the XOR patch on a Debian server and client. You could also use a recent version of Ubuntu. We therefore sometimes refer to the server or client generically as Debian/Ubuntu.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Set Up Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Choose Port for OpenVPN\n    </h3>\n    <p>\n     On your server, choose a random port number between 10,000 and 50,000 for OpenVPN.\n    </p>\n    <blockquote>\n     <code>\n      awk -v min=10000 -v max=50000 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'\n     </code>\n    </blockquote>\n    <p>\n     The example result that we will use in the rest of this article:\n    </p>\n    <blockquote>\n     <code>\n      16273\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Install and Configure Firewall\n    </h3>\n    <p>\n     There are multiple ways to implement a firewall: nftables, iptables, ufw, and firewalld. The modern way is nftables, and that is what we will use here. Issue each of these commands in turn to install and start nftables:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install nftables -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl enable nftables\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start nftables\n     </code>\n    </blockquote>\n    <p>\n     Configure the firewall to accept related traffic and internal traffic:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ct state related,established counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input iif lo counter accept\n     </code>\n    </blockquote>\n    <p>\n     Open port\n     <code>\n      22\n     </code>\n     for SSH. If you can restrict the port\n     <code>\n      22\n     </code>\n     rule so that only certain source IP addresses are whitelisted for SSH access, then so much the better.\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport 22 counter accept\n     </code>\n    </blockquote>\n    <p>\n     Add a rule to open the OpenVPN port that you chose at random:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input udp dport 16273 counter accept\n     </code>\n    </blockquote>\n    <p>\n     Drop all unexpected input:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input counter drop\n     </code>\n    </blockquote>\n    <p>\n     Now add the table for Network Address Translation (NAT) and masquerading the outgoing IP adddress:\n    </p>\n    <blockquote>\n     <code>\n      nft add table nat\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add chain nat prerouting { type nat hook prerouting priority 0 \\; }\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add chain nat postrouting { type nat hook postrouting priority 100 \\; }\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule nat postrouting masquerade\n     </code>\n    </blockquote>\n    <p>\n     Save the rules:\n    </p>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Allow Forwarding\n    </h3>\n    <p>\n     Enable IPv4 forwarding in the Linux kernel. Edit the system control configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/sysctl.conf\n     </code>\n    </blockquote>\n    <p>\n     Uncomment the line:\n    </p>\n    <blockquote>\n     <code>\n      net.ipv4.ip_forward=1\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Apply the new settings by issuing the command:\n    </p>\n    <blockquote>\n     <code>\n      sysctl -p\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Get OpenVPN and XOR Patch Source\n    </h3>\n    <p>\n     You must use matching versions of OpenVPN and the XOR patch.\n    </p>\n    <p>\n     Open a browser and visit the\n     <a href=\"https://github.com/OpenVPN/openvpn/releases\" target=\"_blank\">\n      GitHub releases page for OpenVPN\n     </a>\n     . Determine the latest release number. At the time of writing, it is version\n     <code>\n      v2.5_beta3\n     </code>\n     . It may be a later version at the time you read this article. We will use\n     <code>\n      v2.5_beta3\n     </code>\n     in our examples, though you may need to replace this.\n    </p>\n    <p>\n     Download the OpenVPN tarball for your version:\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/OpenVPN/openvpn/archive/v2.5_beta3.tar.gz\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      tar -xvf v2.5_beta3.tar.gz\n     </code>\n    </blockquote>\n    <p>\n     Download and extract the Tunnelblick repository:\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/Tunnelblick/Tunnelblick/archive/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install unzip -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Apply Patches\n    </h3>\n    <p>\n     Copy the patch files into the OpenVPN directory, replacing\n     <code>\n      openvpn-2.5_beta3\n     </code>\n     by the current version at the time you run this:\n    </p>\n    <blockquote>\n     <code>\n      cp Tunnelblick-master/third_party/sources/openvpn/openvpn-2.5_beta3/patches/*.diff openvpn-2.5_beta3\n     </code>\n    </blockquote>\n    <p>\n     Apply the patches to the OpenVPN source:\n    </p>\n    <blockquote>\n     <code>\n      cd openvpn-2.5_beta3\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install patch -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 02-tunnelblick-openvpn_xorpatch-a.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 03-tunnelblick-openvpn_xorpatch-b.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 04-tunnelblick-openvpn_xorpatch-c.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 05-tunnelblick-openvpn_xorpatch-d.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 06-tunnelblick-openvpn_xorpatch-e.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 10-route-gateway-dhcp.diff\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Build OpenVPN with XOR Patch\n    </h3>\n    <p>\n     Install the prerequisites for the build:\n    </p>\n    <blockquote>\n     <code>\n      apt install build-essential libssl-dev iproute2 liblz4-dev liblzo2-dev libpam0g-dev libpkcs11-helper1-dev libsystemd-dev resolvconf pkg-config autoconf automake libtool -y\n     </code>\n    </blockquote>\n    <p>\n     Compile and install OpenVPN with the XOR patch:\n    </p>\n    <blockquote>\n     <code>\n      autoreconf -i -v -f\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./configure --enable-systemd --enable-async-push --enable-iproute2\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make install\n     </code>\n    </blockquote>\n    <p>\n     The program is installed to\n     <code>\n      /usr/local/sbin/openvpn\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"1-7\">\n     </a>\n     1.7. Create Configuration Directories\n    </h3>\n    <p>\n     Create directories that will store your OpenVPN key, certificate, and configuration files:\n    </p>\n    <blockquote>\n     <code>\n      mkdir -p /etc/openvpn/{server,client}\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-8\">\n     </a>\n     1.8. Create Keys and Certificates with EasyRSA\n    </h3>\n    <p>\n     Install the EasyRSA package:\n    </p>\n    <blockquote>\n     <code>\n      apt install easy-rsa -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian 10 and Ubuntu 20.04, this installs EasyRSA 3.0.6.\n    </p>\n    <p>\n     Make a copy of the EasyRSA scripts and configuration files:\n    </p>\n    <blockquote>\n     <code>\n      cp -r /usr/share/easy-rsa ~\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cd ~/easy-rsa\n     </code>\n    </blockquote>\n    <p>\n     Make a copy of the example variables:\n    </p>\n    <blockquote>\n     <code>\n      cp vars.example vars\n     </code>\n    </blockquote>\n    <p>\n     You can edit the\n     <code>\n      vars\n     </code>\n     file if you wish, but we will just use the defaults. Initialize the public key infrastructure:\n    </p>\n    <blockquote>\n     <code>\n      ./easyrsa init-pki\n     </code>\n    </blockquote>\n    <p>\n     Build your Certificate Authority (CA):\n    </p>\n    <blockquote>\n     <code>\n      ./easyrsa build-ca nopass\n     </code>\n    </blockquote>\n    <p>\n     Give the CA a common name of your choosing, or just press\n     <strong>\n      Enter\n     </strong>\n     to accept the default name of\n     <code>\n      Easy-RSA CA\n     </code>\n     .\n    </p>\n    <p>\n     Generate and sign your server key and certificate. We use the example server name of\n     <code>\n      server\n     </code>\n     in the example below:\n    </p>\n    <blockquote>\n     <code>\n      ./easyrsa gen-req server nopass\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./easyrsa sign-req server server\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      yes\n     </code>\n    </blockquote>\n    <p>\n     Generate and sign your client key and certificate. We use the example name\n     <code>\n      debian10\n     </code>\n     in the example below. You can change this to a name of your own choosing.\n    </p>\n    <blockquote>\n     <code>\n      ./easyrsa gen-req debian10 nopass\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./easyrsa sign-req client debian10\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      yes\n     </code>\n    </blockquote>\n    <p>\n     Generate the Diffie-Hellman parameters. This can take a long time.\n    </p>\n    <blockquote>\n     <code>\n      ./easyrsa gen-dh\n     </code>\n    </blockquote>\n    <p>\n     Generate a preshared key to encrypt the initial exchange:\n    </p>\n    <blockquote>\n     <code>\n      openvpn --genkey secret pki/tls-crypt.key\n     </code>\n    </blockquote>\n    <p>\n     Copy all the keys and certificates into position in the OpenVPN directory:\n    </p>\n    <blockquote>\n     <code>\n      cp pki/ca.crt /etc/openvpn\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp pki/private/server.key /etc/openvpn/server\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp pki/issued/server.crt /etc/openvpn/server\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp pki/private/debian10.key /etc/openvpn/client\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp pki/issued/debian10.crt /etc/openvpn/client\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp pki/tls-crypt.key /etc/openvpn\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp pki/dh.pem /etc/openvpn\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-9\">\n     </a>\n     1.9. Generate Scramble Obfuscation Code\n    </h3>\n    <p>\n     For the scrambling obfuscation, generate a 192-bit (24-byte) code, expressed as 32 base-64 characters:\n    </p>\n    <blockquote>\n     <code>\n      openssl rand -base64 24\n     </code>\n    </blockquote>\n    <p>\n     The example result that we will use in the rest of this article:\n    </p>\n    <blockquote>\n     <code>\n      r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-10\">\n     </a>\n     1.10. Configure OpenVPN Server\n    </h3>\n    <p>\n     Edit the OpenVPN configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/openvpn/server.conf\n     </code>\n    </blockquote>\n    <p>\n     The model for you to adapt to your situation is as follows.\n    </p>\n    <ul>\n     <li>\n      Change the random port number\n      <code>\n       16273\n      </code>\n      in the example to your own random port number\n     </li>\n     <li>\n      Change the sample obfuscation code\n      <code>\n       r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\n      </code>\n      to your own random code.\n     </li>\n    </ul>\n    <blockquote>\n     <code>\n      port 16273\n      <br/>\n      proto udp\n      <br/>\n      dev tun\n      <br/>\n      ca /etc/openvpn/ca.crt\n      <br/>\n      cert /etc/openvpn/server/server.crt\n      <br/>\n      key /etc/openvpn/server/server.key\n      <br/>\n      dh /etc/openvpn/dh.pem\n      <br/>\n      server 10.8.0.0 255.255.255.0\n      <br/>\n      ifconfig-pool-persist /etc/openvpn/ipp.txt\n      <br/>\n      push \"redirect-gateway def1 bypass-dhcp\"\n      <br/>\n      push \"dhcp-option DNS 8.8.8.8\"\n      <br/>\n      push \"dhcp-option DNS 8.8.4.4\"\n      <br/>\n      keepalive 10 120\n      <br/>\n      cipher AES-128-GCM\n      <br/>\n      tls-crypt /etc/openvpn/tls-crypt.key\n      <br/>\n      persist-key\n      <br/>\n      persist-tun\n      <br/>\n      status openvpn-status.log\n      <br/>\n      verb 3\n      <br/>\n      scramble obfuscate r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"1-11\">\n     </a>\n     1.11. Configure Systemd\n    </h3>\n    <p>\n     Create a systemd service file for OpenVPN:\n    </p>\n    <blockquote>\n     <code>\n      vi /lib/systemd/system/openvpn@.service\n     </code>\n    </blockquote>\n    <p>\n     Insert contents like this:\n    </p>\n    <blockquote>\n     <code>\n      [Unit]\n      <br/>\n      Description=OpenVPN connection to %i\n      <br/>\n      PartOf=openvpn.service\n      <br/>\n      ReloadPropagatedFrom=openvpn.service\n      <br/>\n      Before=systemd-user-sessions.service\n      <br/>\n      After=network-online.target\n      <br/>\n      Wants=network-online.target\n      <br/>\n      Documentation=man:openvpn(8)\n      <br/>\n      Documentation=https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage\n      <br/>\n      Documentation=https://community.openvpn.net/openvpn/wiki/HOWTO\n      <br/>\n      <br/>\n      [Service]\n      <br/>\n      Type=notify\n      <br/>\n      PrivateTmp=true\n      <br/>\n      WorkingDirectory=/etc/openvpn\n      <br/>\n      ExecStart=/usr/local/sbin/openvpn --daemon ovpn-%i --status /run/openvpn/%i.status 10 --cd /etc/openvpn --config /etc/openvpn/%i.conf --writepid /run/openvpn/%i.pid\n      <br/>\n      PIDFile=/run/openvpn/%i.pid\n      <br/>\n      KillMode=process\n      <br/>\n      ExecReload=/bin/kill -HUP $MAINPID\n      <br/>\n      CapabilityBoundingSet=CAP_IPC_LOCK CAP_NET_ADMIN CAP_NET_BIND_SERVICE CAP_NET_RAW CAP_SETGID CAP_SETUID CAP_SYS_CHROOT CAP_DAC_OVERRIDE CAP_AUDIT_WRITE\n      <br/>\n      LimitNPROC=100\n      <br/>\n      DeviceAllow=/dev/null rw\n      <br/>\n      DeviceAllow=/dev/net/tun rw\n      <br/>\n      ProtectSystem=true\n      <br/>\n      ProtectHome=true\n      <br/>\n      RestartSec=5s\n      <br/>\n      Restart=on-failure\n      <br/>\n      <br/>\n      [Install]\n      <br/>\n      WantedBy=multi-user.target\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <p>\n     Create the directory for the process identification (pid) file:\n    </p>\n    <blockquote>\n     <code>\n      mkdir /run/openvpn\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-12\">\n     </a>\n     1.12. Start OpenVPN\n    </h3>\n    <p>\n     Start OpenVPN on the server:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable openvpn@server\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start openvpn@server\n     </code>\n    </blockquote>\n    <p>\n     Check that it is active and listening on the expected port:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status openvpn@server\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ss -tulpn | grep openvpn\n     </code>\n    </blockquote>\n    <p>\n     Server work is done:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Set Up Client\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Download Keys and Certificates\n    </h3>\n    <p>\n     Now go to work on your PC. Assuming that your server has IP address\n     <code>\n      yy.yy.yy.yy\n     </code>\n     and that you named the client key and certificate\n     <code>\n      debian10.*\n     </code>\n     , copy the required files down from the server to the client like this:\n    </p>\n    <blockquote>\n     <code>\n      scp root@yy.yy.yy.yy:/etc/openvpn/client/debian10.key ~/Downloads/debian10.key\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      scp root@yy.yy.yy.yy:/etc/openvpn/client/debian10.crt ~/Downloads/debian10.crt\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      scp root@yy.yy.yy.yy:/etc/openvpn/ca.crt ~/Downloads/ca.crt\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      scp root@yy.yy.yy.yy:/etc/openvpn/tls-crypt.key ~/Downloads/tls-crypt.key\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Get OpenVPN and XOR Patch Source\n    </h3>\n    <p>\n     For a Debian/Ubuntu client, this is the pretty much same process as on the server. The version number of OpenVPN and the XOR patch will be the same as on the server. We will use\n     <code>\n      v2.5_beta3\n     </code>\n     in our examples, though you may need to replace this.\n    </p>\n    <p>\n     Download the OpenVPN tarball for your version:\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://github.com/OpenVPN/openvpn/archive/v2.5_beta3.tar.gz\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      tar -xvf v2.5_beta3.tar.gz\n     </code>\n    </blockquote>\n    <p>\n     Download the Tunnelblick repository:\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/Tunnelblick/Tunnelblick/archive/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo apt install unzip -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Apply Patches\n    </h3>\n    <p>\n     Copy the patch files into the OpenVPN directory, replacing\n     <code>\n      openvpn-2.5_beta3\n     </code>\n     by the current version:\n    </p>\n    <blockquote>\n     <code>\n      cp Tunnelblick-master/third_party/sources/openvpn/openvpn-2.5_beta3/patches/*.diff openvpn-2.5_beta3\n     </code>\n    </blockquote>\n    <p>\n     Apply the patches to the OpenVPN source:\n    </p>\n    <blockquote>\n     <code>\n      cd openvpn-2.5_beta3\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo apt install patch -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 02-tunnelblick-openvpn_xorpatch-a.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 03-tunnelblick-openvpn_xorpatch-b.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 04-tunnelblick-openvpn_xorpatch-c.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 05-tunnelblick-openvpn_xorpatch-d.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 06-tunnelblick-openvpn_xorpatch-e.diff\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      patch -p1 &lt; 10-route-gateway-dhcp.diff\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Build OpenVPN with XOR Patch\n    </h3>\n    <p>\n     Install the prerequisites for the build:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install build-essential libssl-dev iproute2 liblz4-dev liblzo2-dev libpam0g-dev libpkcs11-helper1-dev libsystemd-dev resolvconf pkg-config autoconf automake libtool -y\n     </code>\n    </blockquote>\n    <p>\n     Compile and install OpenVPN with the XOR patch:\n    </p>\n    <blockquote>\n     <code>\n      autoreconf -i -v -f\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./configure --enable-systemd --enable-async-push --enable-iproute2\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo make install\n     </code>\n    </blockquote>\n    <p>\n     The program is installed to\n     <code>\n      /usr/local/sbin/openvpn\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Fix DNS Resolution\n    </h3>\n    <p>\n     There is a problem with the pushed DNS servers being ignored in OpenVPN on Linux. The solution depends on what is managing the nameservers. Here is a solution that worked on a Debian 10 client with NetworkManager. There is an alternative solution for\n     <a href=\"https://blog.syddel.uk/?p=253\" target=\"_blank\">\n      Ubuntu with Systemd\n     </a>\n     .\n    </p>\n    <p>\n     Edit the NetworkManager configuration:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /etc/NetworkManager/NetworkManager.conf\n     </code>\n    </blockquote>\n    <p>\n     In the\n     <code>\n      [main]\n     </code>\n     section, insert a line:\n    </p>\n    <blockquote>\n     <code>\n      dns=none\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Then edit the\n     <code>\n      /etc/resolv.conf\n     </code>\n     file:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /etc/resolv.conf\n     </code>\n    </blockquote>\n    <p>\n     Change the contents of the file to specify nameservers that will be accessible while the VPN is on, e.g.:\n    </p>\n    <blockquote>\n     <code>\n      nameserver 8.8.8.8\n      <br/>\n      nameserver 8.8.4.4\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Restart NetworkManager:\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl restart NetworkManager\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Create OpenVPN Client Configuration File\n    </h3>\n    <p>\n     Create a client configuration file for OpenVPN:\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      vi debian10.conf\n     </code>\n    </blockquote>\n    <p>\n     Insert the configuration details below, tailoring them to your situation:\n    </p>\n    <ul>\n     <li>\n      Replace\n      <code>\n       yy.yy.yy.yy\n      </code>\n      by the public IP address of your server\n     </li>\n     <li>\n      Replace\n      <code>\n       16273\n      </code>\n      by your random port\n     </li>\n     <li>\n      Replace\n      <code>\n       r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\n      </code>\n      by your random obfuscation code\n     </li>\n    </ul>\n    <blockquote>\n     <code>\n      client\n      <br/>\n      dev tun\n      <br/>\n      proto udp\n      <br/>\n      remote yy.yy.yy.yy 16273\n      <br/>\n      resolv-retry infinite\n      <br/>\n      nobind\n      <br/>\n      persist-key\n      <br/>\n      persist-tun\n      <br/>\n      ca ca.crt\n      <br/>\n      cert debian10.crt\n      <br/>\n      key debian10.key\n      <br/>\n      remote-cert-tls server\n      <br/>\n      cipher AES-128-GCM\n      <br/>\n      tls-crypt tls-crypt.key\n      <br/>\n      verb 3\n      <br/>\n      scramble obfuscate r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"2-7\">\n     </a>\n     2.7. Start OpenVPN Client\n    </h3>\n    <p>\n     Open a terminal on your client PC, and start OpenVPN running:\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo /usr/local/sbin/openvpn --config debian10.conf\n     </code>\n    </blockquote>\n    <p>\n     Leave the terminal open with OpenVPN running in it.\n    </p>\n    <h3>\n     <a id=\"2-8\">\n     </a>\n     2.8. Test End-to-End\n    </h3>\n    <p>\n     Open Firefox.\n    </p>\n    <p>\n     Visit\n     <a href=\"https://ipchicken.com\" target=\"_blank\">\n      IP Chicken\n     </a>\n     .\n    </p>\n    <p>\n     You should see the IP address of your remote server, not your local client.\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <ul>\n     <li>\n      For OpenVPN questions, post in the\n      <a href=\"https://forums.openvpn.net/\" target=\"_blank\">\n       OpenVPN forum\n      </a>\n     </li>\n     <li>\n      There is a Tunnelblick discussion group on\n      <a href=\"https://groups.google.com/g/tunnelblick-discuss\" target=\"_blank\">\n       Google Groups\n      </a>\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2020-09\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}