{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   Obfuscated SSH\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     Obfuscated SSH\n    </h1>\n    <p>\n     Tunneling your browsing through an obfuscated SSH connection is a less common strategy and therefore less likely to be expected by censors.\n    </p>\n    <p>\n     This article shows you how to create an obfuscated SSH server and client. In the examples, your client is at IP address\n     <code>\n      xx.xx.xx.xx\n     </code>\n     , and the server is at IP address\n     <code>\n      yy.yy.yy.yy\n     </code>\n     . Wherever you see these values in the examples, you will need to change them to match your actual IP addresses. If you do not know your clientâ€™s IP address, you can determine it by opening a browser and visiting\n     <a href=\"https://www.ipchicken.com\" target=\"_blank\">\n      IPchicken.com\n     </a>\n     .\n    </p>\n    <p>\n     The server and client in this tutorial both run Debian 10.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Choose Port for Obfuscated SSH\n    </h3>\n    <p>\n     We will provide the obfuscated SSH service on an obscure port number. Choose a random port number between 10,000 and 50,000 by issuing this command:\n    </p>\n    <blockquote>\n     <code>\n      awk -v min=10000 -v max=50000 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'\n     </code>\n    </blockquote>\n    <p>\n     The example port number that we will use in the rest of this article:\n    </p>\n    <blockquote>\n     <code>\n      20727\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Choose Key for Obfuscated SSH\n    </h3>\n    <p>\n     Choose a key. We will use this like a password to hide the availability of obfuscated SSH from casual visitors and port scanners. Generate a key by issuing this command:\n    </p>\n    <blockquote>\n     <code>\n      &lt; /dev/urandom tr -dc a-z0-9 | head -c8\n     </code>\n    </blockquote>\n    <p>\n     The example key that we will use in the rest of this article:\n    </p>\n    <blockquote>\n     <code>\n      qsxopp83\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Install and Configure Firewall\n    </h3>\n    <p>\n     If your server does not already have a firewall, then install and configure a firewall now. We will open both port 22 for regular SSH and port 20727 (in our example) for obfuscated SSH:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install nftables -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl enable nftables\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start nftables\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ct state related,established counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input iif lo counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ip protocol icmp counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input ip6 nexthdr icmpv6 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport 22 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport 20727 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input counter drop\n     </code>\n    </blockquote>\n    <p>\n     Save these firewall rules:\n    </p>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <p>\n     For better security, restrict port 22 access to trusted IP addresses only. For example, if you always log in from IP address\n     <code>\n      xx.xx.xx.xx\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/nftables.conf\n     </code>\n    </blockquote>\n    <p>\n     Edit the line for the regular SSH port, and restrict it to accept SSH requests only from your personal IP address:\n    </p>\n    <blockquote>\n     <code>\n      tcp dport ssh ip saddr xx.xx.xx.xx/32 counter packets 0 bytes 0 accept\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Restart the firewall:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart nftables\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Add Obfuscated OpenSSH Repository\n    </h3>\n    <p>\n     Create a new APT repository file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/apt/sources.list.d/zinglau.list\n     </code>\n    </blockquote>\n    <p>\n     Insert a line:\n    </p>\n    <blockquote>\n     <code>\n      deb https://deb.zinglau.com/debian buster main\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Use the following commands to enable this repository:\n    </p>\n    <blockquote>\n     <code>\n      apt install gnupg -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://deb.zinglau.com/pubkey.gpg -O - | apt-key add -\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt update\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Install Obfuscated OpenSSH\n    </h3>\n    <p>\n     Install the patched version of OpenSSH:\n    </p>\n    <blockquote>\n     <code>\n      apt list --upgradeable\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install openssh-server -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Configure APT Priorities\n    </h3>\n    <p>\n     When multiple repositories are enabled, a package can exist in several of them. To know which one should be installed, APT assigns priorities to packages. The default is 500. Higher priorities will be chosen in preference to lower priorities.\n    </p>\n    <p>\n     To configure APT priorities, create a file in\n     <code>\n      /etc/apt/preferences.d\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/apt/preferences.d/zinglau\n     </code>\n    </blockquote>\n    <p>\n     Insert the following contents:\n    </p>\n    <blockquote>\n     <code>\n      Package: *\n      <br/>\n      Pin: release o=zinglau.com\n      <br/>\n      Pin-Priority: 600\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Verify the change:\n    </p>\n    <blockquote>\n     <code>\n      apt-cache policy openssh-server\n     </code>\n    </blockquote>\n    <p>\n     The obfuscated version should be at the top.\n    </p>\n    <h3>\n     <a id=\"1-7\">\n     </a>\n     1.7. Configure SSH Daemon\n    </h3>\n    <p>\n     Edit the OpenSSH daemon configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/ssh/sshd_config\n     </code>\n    </blockquote>\n    <p>\n     Uncomment the line:\n    </p>\n    <blockquote>\n     <code>\n      Port 22\n     </code>\n    </blockquote>\n    <p>\n     Insert lines (using our example port number and key):\n    </p>\n    <blockquote>\n     <code>\n      ObfuscatedPort 20727\n      <br/>\n      ObfuscateKeyword qsxopp83\n     </code>\n    </blockquote>\n    <p>\n     Save the file with your changes.\n    </p>\n    <h3>\n     <a id=\"1-8\">\n     </a>\n     1.8. Restart SSH\n    </h3>\n    <p>\n     Restart the SSH daemon with new binary and new configuration:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart sshd\n     </code>\n    </blockquote>\n    <p>\n     Make sure the SSH daemon is listening on both the regular and the obfuscated port:\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep sshd\n     </code>\n    </blockquote>\n    <p>\n     The server work is done for now, so exit your SSH session:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Client\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Add Obfuscated OpenSSH Repository\n    </h3>\n    <p>\n     Now do the same thing on your client PC as you did on the server. Create a new APT repository file:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt update &amp;&amp; sudo apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo vi /etc/apt/sources.list.d/zinglau.list\n     </code>\n    </blockquote>\n    <p>\n     Insert a line:\n    </p>\n    <blockquote>\n     <code>\n      deb https://deb.zinglau.com/debian buster main\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Use the following commands to enable this repository:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install gnupg -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://deb.zinglau.com/pubkey.gpg -O - | sudo apt-key add -\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo apt update\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Install Obfuscated OpenSSH\n    </h3>\n    <p>\n     Install the patched version of OpenSSH:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt list --upgradeable\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo apt install openssh-client -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Configure APT Priorities\n    </h3>\n    <p>\n     As on the server, create an APT configuration file in\n     <code>\n      /etc/apt/preferences.d\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /etc/apt/preferences.d/zinglau\n     </code>\n    </blockquote>\n    <p>\n     Insert the contents:\n    </p>\n    <blockquote>\n     <code>\n      Package: *\n      <br/>\n      Pin: release o=zinglau.com\n      <br/>\n      Pin-Priority: 600\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Verify the change:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt-cache policy openssh-client\n     </code>\n    </blockquote>\n    <p>\n     The obfuscated version should be at the top.\n    </p>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Test Obfuscated SSH Connection\n    </h3>\n    <p>\n     Attempt to make an obfuscated SSH connection to your server. In the example below, we assume the obfuscation key is\n     <code>\n      qsxopp83\n     </code>\n     , the obfuscation port is\n     <code>\n      20727\n     </code>\n     , and the server is located at IP address\n     <code>\n      yy.yy.yy.yy\n     </code>\n     . You will need to change these parameters to match your actual situation.\n    </p>\n    <blockquote>\n     <code>\n      ssh -z -Z qsxopp83 -p 20727 root@yy.yy.yy.yy.yy\n     </code>\n    </blockquote>\n    <p>\n     You should be able to log in as usual. Once you have confirmed this, log out for now:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Create SSH Configuration File\n    </h3>\n    <p>\n     The parameters may be hard to remember, so we will put them in an SSH client configuration file. Choose a memorable name for your server. We will use as an example\n     <code>\n      obssh1\n     </code>\n     . Edit your SH client configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi ~/.ssh/config\n     </code>\n    </blockquote>\n    <p>\n     Insert lines as shown below. Replace the parameters in the example with those matching your actual situation.\n    </p>\n    <pre>\nHost obssh1\n    HostName yy.yy.yy.yy\n    Port 20727\n    ObfuscateHandshake yes\n    ObfuscateKeyword qsxopp83\n</pre>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Test SSH\n    </h3>\n    <p>\n     Now that you have save the parameters in a file, you can connect with just:\n    </p>\n    <blockquote>\n     <code>\n      ssh obssh1 -l root\n     </code>\n    </blockquote>\n    <p>\n     You should be able to log in again. Once you have confirmed this, log out:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-7\">\n     </a>\n     2.7. Start SSH\n    </h3>\n    <p>\n     To use the obfuscated SSH connection for censorship circumvention, we need to invoke the dynamic port forwarding feature of OpenSSH. Therefore connect again, with localhost port 1080 being dynamically port forwarded through the tunnel:\n    </p>\n    <blockquote>\n     <code>\n      ssh obssh1 -l root -D 1080\n     </code>\n    </blockquote>\n    <p>\n     Leave the SSH session running while we go on to the next step.\n    </p>\n    <h3>\n     <a id=\"2-8\">\n     </a>\n     2.8. Configure Firefox\n    </h3>\n    <p>\n     With the SSH connection still running, open Firefox. From the hamburger menu, select\n     <strong>\n      Preferences\n     </strong>\n     . Scroll down to\n     <strong>\n      Network Settings\n     </strong>\n     , and click\n     <strong>\n      Settings\n     </strong>\n     .\n    </p>\n    <ul>\n     <li>\n      Choose\n      <strong>\n       Manual proxy configuration\n      </strong>\n      .\n     </li>\n     <li>\n      SOCKS Host\n      <code>\n       127.0.0.1\n      </code>\n      .\n     </li>\n     <li>\n      Port\n      <code>\n       1080\n      </code>\n      .\n     </li>\n     <li>\n      Select version\n      <strong>\n       SOCKS v5\n      </strong>\n      .\n     </li>\n     <li>\n      Check\n      <strong>\n       Proxy DNS when using SOCKS v5\n      </strong>\n      .\n     </li>\n    </ul>\n    <p>\n     Click\n     <strong>\n      OK\n     </strong>\n     .\n    </p>\n    <h3>\n     <a id=\"2-9\">\n     </a>\n     2.9. End-to-End Test\n    </h3>\n    <p>\n     In Firefox, visit\n     <a href=\"https://ipchicken.com\" target=\"_blank\">\n      IP Chicken\n     </a>\n     . You should see the IP address of your remote server, not your local client.\n    </p>\n    <h3>\n     <a id=\"2-10\">\n     </a>\n     2.10. Finish Up\n    </h3>\n    <p>\n     When you have finished browsing, set your network connection in Firefox back to\n     <strong>\n      Use system proxy settings\n     </strong>\n     .\n    </p>\n    <p>\n     In your terminal window, log out of your SSH session:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <p>\n     The documentation for the obfuscated OpenSSH patch is on\n     <a href=\"https://zinglau.com/projects/ObfuscatedOpenSSHPatches.html\" target=\"_blank\">\n      zinglau.com\n     </a>\n     .\n    </p>\n    <p>\n     You can raise issues with the patch on\n     <a href=\"https://github.com/zinglau/obfuscated-openssh-patches/issues\" target=\"_blank\">\n      GitHub\n     </a>\n     .\n    </p>\n    <p>\n     <em>\n      Updated 2020-09\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}