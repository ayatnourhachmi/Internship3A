{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   WireGuard + udptunnel\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     WireGuard + udptunnel\n    </h1>\n    <p>\n     WireGuard is a popular new VPN protocol. A known limitation of WireGuard is that it can only use UDP, which may be blocked on some networks. By combining WireGuard with udptunnel, WireGuard can emulate TCP. Note that udptunnel does not support IPv6.\n    </p>\n    <p>\n     In this tutorial, WireGuard and udptunnel are implemented on an Ubuntu Linux server and an Ubuntu Linux client. In the examples, the client is assumed to be at IP address\n     <code>\n      11.11.11.11\n     </code>\n     , and the server is assumed to be at IP address\n     <code>\n      22.22.22.22\n     </code>\n     . We will use port\n     <code>\n      1433/tcp\n     </code>\n     for udptunnel and port\n     <code>\n      51820/udp\n     </code>\n     for WireGuard.\n    </p>\n    <p>\n     We assume that you SSH into the server as\n     <code>\n      root\n     </code>\n     , but that you use a non-root identity with sudo permissions on the client.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Update Server\n    </h3>\n    <p>\n     Before you do anything else, get your server completely up to date:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Configure Firewall\n    </h3>\n    <p>\n     We are going to use port\n     <code>\n      1433/tcp\n     </code>\n     for udptunnel. Although we use port\n     <code>\n      51820/udp\n     </code>\n     for WireGuard, this port should generally be kept closed, as that will better camouflage your server.\n    </p>\n    <p>\n     Here are some sample iptables rules for IPv4. In this example, SSH is confined to a single IP address, which is\n     <code>\n      11.11.11.11\n     </code>\n     in the example. This is the IP address of your workstation Replace\n     <code>\n      11.11.11.11\n     </code>\n     by the actual IP address of your workstation.\n    </p>\n    <blockquote>\n     <code>\n      iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -i lo -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p icmp -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 22 -s 11.11.11.11/32 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 1433 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -P INPUT DROP\n     </code>\n    </blockquote>\n    <p>\n     udp2tunnel does not support IPv6, so there is no need to open any ports there.\n    </p>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -i lo -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -A INPUT -p icmpv6 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ip6tables -P INPUT DROP\n     </code>\n    </blockquote>\n    <p>\n     To persist these rules across reboots, install the package iptables-persistent:\n    </p>\n    <blockquote>\n     <code>\n      apt install iptables-persistent -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Install WireGuard\n    </h3>\n    <p>\n     Install WireGuard using the script and instructions from\n     <a href=\"https://github.com/angristan/wireguard-install\" target=\"_blank\">\n      https://github.com/angristan/wireguard-install\n     </a>\n     :\n    </p>\n    <blockquote>\n     <code>\n      apt install curl -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      curl -O https://raw.githubusercontent.com/angristan/wireguard-install/master/wireguard-install.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      chmod +x wireguard-install.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ./wireguard-install.sh\n     </code>\n    </blockquote>\n    <p>\n     You can accept the defaults all the way through the script’s questions, except specify the server’s WireGuard port as\n     <code>\n      51820\n     </code>\n     .\n    </p>\n    <p>\n     When prompted for the name of the first client, call it\n     <code>\n      wgtcp\n     </code>\n     . This causes the script to create a client configuration file named\n     <code>\n      wg0-client-wgtcp.conf\n     </code>\n     . The server configuration is placed in\n     <code>\n      /etc/wireguard/wg0.conf\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Install udptunnel\n    </h3>\n    <p>\n     Install the compiler, etc.:\n    </p>\n    <blockquote>\n     <code>\n      apt install build-essential pkg-config zip unzip -y\n     </code>\n    </blockquote>\n    <p>\n     Download the source:\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/rfc1036/udptunnel/archive/refs/heads/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <p>\n     Make and install:\n    </p>\n    <blockquote>\n     <code>\n      cd udptunnel-master\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make install\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Run udptunnel\n    </h3>\n    <p>\n     To free up the terminal for any other use you may have, we run udptunnel in its own screen session. If you do not already have screen, install it now:\n    </p>\n    <blockquote>\n     <code>\n      apt install screen -y\n     </code>\n    </blockquote>\n    <p>\n     Start a named screen session:\n    </p>\n    <blockquote>\n     <code>\n      screen -S udptunnel\n     </code>\n    </blockquote>\n    <p>\n     Run udptunnel in this screen session:\n    </p>\n    <blockquote>\n     <code>\n      udptunnel --server 0.0.0.0:1433 --verbose 127.0.0.1:51820\n     </code>\n    </blockquote>\n    <p>\n     Detach from the named screen session by pressing\n     <strong>\n      Ctrl\n     </strong>\n     +\n     <strong>\n      a\n     </strong>\n     immediately followed by\n     <strong>\n      d\n     </strong>\n     on your computer keyboard. (You can resume the named screen session at any time with the command\n     <code>\n      screen -r udptunnel\n     </code>\n     .)\n    </p>\n    <p>\n     Exit your SSH session:\n    </p>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Client\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Update Client\n    </h3>\n    <p>\n     Before you do anything else, get your client completely up to date:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt update &amp;&amp; sudo apt upgrade -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Configure Firewall\n    </h3>\n    <p>\n     We are going to use port\n     <code>\n      1433/tcp\n     </code>\n     for udptunnel. However, all connections will be initiated by the client, so we generally will not need a new firewall rule to open\n     <code>\n      1433/tcp\n     </code>\n     for input.\n    </p>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Install udptunnel\n    </h3>\n    <p>\n     Install the compiler, etc.:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install build-essential pkg-config zip unzip -y\n     </code>\n    </blockquote>\n    <p>\n     Download the source:\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://github.com/rfc1036/udptunnel/archive/refs/heads/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <p>\n     Make and install:\n    </p>\n    <blockquote>\n     <code>\n      cd udptunnel-master\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo make install\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Run udptunnel\n    </h3>\n    <p>\n     To free up the terminal for any other use you may have, we run udptunnel in its own screen session. If you do not already have screen, install it now:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install screen -y\n     </code>\n    </blockquote>\n    <p>\n     Start a named screen session:\n    </p>\n    <blockquote>\n     <code>\n      screen -S udptunnel\n     </code>\n    </blockquote>\n    <p>\n     Run udptunnel in this screen session:\n    </p>\n    <blockquote>\n     <code>\n      sudo udptunnel 127.0.0.1:51820 22.22.22.22:1433\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the above command by the actual IP address of your server.\n    </p>\n    <p>\n     Detach from the named screen session by pressing\n     <strong>\n      Ctrl\n     </strong>\n     +\n     <strong>\n      a\n     </strong>\n     immediately followed by\n     <strong>\n      d\n     </strong>\n     on your computer keyboard. (You can resume the named screen session at any time with the command\n     <code>\n      screen -r udptunnel\n     </code>\n     .)\n    </p>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Install WireGuard\n    </h3>\n    <p>\n     Install WireGuard on the client:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install wireguard resolvconf -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Configure WireGuard\n    </h3>\n    <p>\n     Download the configuration file from the server:\n    </p>\n    <blockquote>\n     <code>\n      cd ~/Downloads\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      scp root@22.22.22.22:wg0-client-wgtcp.conf .\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the command above by the actual IP address of your server.\n    </p>\n    <p>\n     Copy the configuration file into place:\n    </p>\n    <blockquote>\n     <code>\n      sudo cp wg0-client-wgtcp.conf /etc/wireguard/wg0.conf\n     </code>\n    </blockquote>\n    <p>\n     Edit the WireGuard configuration file:\n    </p>\n    <blockquote>\n     <code>\n      sudo vi /etc/wireguard/wg0.conf\n     </code>\n    </blockquote>\n    <p>\n    </p>\n    <p>\n     udptunnel will take care of forwarding packets to the real server IP address. Therefore change the endpoint of the peer to be localhost, which is where udptunnel is listening. Also remove IPv6 addresses, since udptunnel does not support IPv6.\n    </p>\n    <p>\n     Here is a sample client configuration file after these changes:\n    </p>\n    <pre>\n[Interface]\nPrivateKey = eFtVksTyhrGjkGbvD8aJEtCbBejoTdpfpZj8eVqkaEU=\nAddress = 10.66.66.2/32\nDNS = 94.140.14.14,94.140.15.15\n\n[Peer]\nPublicKey = bPsQarHrizq/3WadVipH0kmpAOPS5VOQHR6RyE3pYlk=\nPresharedKey = mCN5BexpDJKTLoCQM8a++DFkpoVWlpyg0HSfB1sY1HY=\nEndpoint = 127.0.0.1:51820\nAllowedIPs = 0.0.0.0/0\n</pre>\n    <p>\n     Write the file to disk. Quit the editor.\n    </p>\n    <h3>\n     <a id=\"2-7\">\n     </a>\n     2.7 Add Static Route\n    </h3>\n    <p>\n     Add a static route from the client to the server, so that it does not try to send WireGuard traffic via udptunnel, then udptunnel via WireGuard, in a continuous and never-ending loop. For example, if your default gateway is\n     <code>\n      192.168.1.1\n     </code>\n     and your interface is\n     <code>\n      wlp3s0\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      sudo ip route add 22.22.22.22 via 192.168.1.1 dev wlp3s0\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the command above by the actual IP address of your server. Replace\n     <code>\n      192.168.1.1\n     </code>\n     and\n     <code>\n      wlp3s0\n     </code>\n     by your actual default gateway. If you do not know your default gateway, you can determine it by issuing the command\n     <code>\n      ip r\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"2-8\">\n     </a>\n     2.8. Run WireGuard\n    </h3>\n    <blockquote>\n     <code>\n      sudo wg-quick up wg0\n     </code>\n    </blockquote>\n    <p>\n     You can test your connection by visiting\n     <a href=\"https://whatismyipaddress.com\" target=\"_blank\">\n      https://whatismyipaddress.com\n     </a>\n     in Firefox.\n    </p>\n    <h3>\n     <a id=\"2-9\">\n     </a>\n     2.9. Disconnect\n    </h3>\n    <p>\n     Stop WireGuard:\n    </p>\n    <blockquote>\n     <code>\n      sudo wg-quick down wg0\n     </code>\n    </blockquote>\n    <p>\n     Stop udptunnel:\n    </p>\n    <blockquote>\n     <code>\n      screen -r udptunnel\n     </code>\n    </blockquote>\n    <p>\n     Stop udptunnel with\n     <strong>\n      Ctrl\n     </strong>\n     +\n     <strong>\n      c\n     </strong>\n     . Kill the screen session by doing\n     <strong>\n      Ctrl\n     </strong>\n     +\n     <strong>\n      a\n     </strong>\n     followed by\n     <strong>\n      k\n     </strong>\n     , then\n     <strong>\n      y\n     </strong>\n     to confirm.\n    </p>\n    <p>\n     Delete the static route:\n    </p>\n    <blockquote>\n     <code>\n      sudo ip route del 22.22.22.22 via 192.168.1.1 dev wlp3s0\n     </code>\n    </blockquote>\n    <p>\n     Replace\n     <code>\n      22.22.22.22\n     </code>\n     in the command above by the actual IP address of your server. Replace\n     <code>\n      192.168.1.1\n     </code>\n     and\n     <code>\n      wlp3s0\n     </code>\n     by your actual default gateway.\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <p>\n     For WireGuard, the best place to get help is the\n     <code>\n      #wireguard\n     </code>\n     IRC channel on\n     <a href=\"https://web.libera.chat/#wireguard\" target=\"_blank\">\n      libera.chat\n     </a>\n     .\n    </p>\n    <p>\n     udptunnel is a very old program and no longer supported.\n    </p>\n    <p>\n     <em>\n      Updated 2022-02-08\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}