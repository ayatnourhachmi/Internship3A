{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   Iodine DNS Tunnel on Port 53\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     Iodine DNS Tunnel on Port 53\n    </h1>\n    <p>\n     Iodine tunnels your network activity as DNS requests on port 53. This can be useful when all other ports are blocked or censored. The name Iodine was suggested by the initial letters of “IP over DNS.” By a happy coincidence, the element Iodine has atomic number 53, which just so happens to be the port number for DNS.\n    </p>\n    <p>\n     To construct an Iodine tunnel, you will need:\n    </p>\n    <ul>\n     <li>\n      A domain name (which we will give as\n      <code>\n       example.com\n      </code>\n      in our examples)\n     </li>\n     <li>\n      A server with a public IP address (which we will give as\n      <code>\n       xx.xx.xx.xx\n      </code>\n      in our examples)\n     </li>\n     <li>\n      A client PC\n     </li>\n    </ul>\n    <p>\n     In this tutorial, the server and client both run Debian 10. The same procedures will work for recent versions of Ubuntu.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Create DNS Records\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Select DNS Service\n    </h3>\n    <p>\n     Almost all domain name registrars provide a DNS service, but not all registrars let you create type\n     <code>\n      NS\n     </code>\n     records. If you cannot add\n     <code>\n      NS\n     </code>\n     records add your registrar, you may need to switch your DNS service from your domain name registrar to\n     <a href=\"https://www.cloudflare.com\" target=\"_blank\">\n      Cloudflare\n     </a>\n     .\n    </p>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Choose Subdomain\n    </h3>\n    <p>\n     You are going to delegate the DNS service for one subdomain to your Iodine service. I suggest using a short name for the subdomain, so that as much space as possible is available for the tunneled data.\n    </p>\n    <p>\n     In our examples, we will use\n     <code>\n      x\n     </code>\n     as the subdomain we delegate to Iodine.\n    </p>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Create DNS Records\n    </h3>\n    <p>\n     At your DNS service (whether at your domain name registrar or elsewhere):\n    </p>\n    <ul>\n     <li>\n      Create an\n      <code>\n       A\n      </code>\n      record pointing from\n      <code>\n       nsx.example.com\n      </code>\n      to your server IP address of\n      <code>\n       xx.xx.xx.xx\n      </code>\n     </li>\n     <li>\n      Create an\n      <code>\n       NS\n      </code>\n      record pointing from subdomain\n      <code>\n       x\n      </code>\n      to host\n      <code>\n       nsx.example.com.\n      </code>\n      (which ends with a dot in most DNS systems)\n     </li>\n    </ul>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Check DNS Records\n    </h3>\n    <p>\n     You will need to wait for your DNS changes to propagate. How long this takes depends on your DNS service. You can check that your DNS\n     <code>\n      A\n     </code>\n     record for your server resolves by going to your PC and issuing these commands:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install dnsutils\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      dig +short nsx.example.com\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Set Up Server\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Open Firewall\n    </h3>\n    <p>\n     SSH into your server.\n    </p>\n    <p>\n     We will open the firewall for port\n     <code>\n      53/udp\n     </code>\n     and\n     <code>\n      53/tcp\n     </code>\n     . The Iodine documentation implies that Iodine only actually uses\n     <code>\n      53/udp\n     </code>\n     , but we will open both. The actual DNS protocol requires\n     <code>\n      53/tcp\n     </code>\n     to be available as a backup in case\n     <code>\n      53/udp\n     </code>\n     fails.\n    </p>\n    <p>\n     We also need to open the firewall for SSH input from the virtual network, for which we use IP addresses\n     <code>\n      10.10.0.0/24\n     </code>\n     in the examples in this article.\n    </p>\n    <p>\n     Firewalls may be implemented with nftables, iptables, ufw, firewalld, or security groups. We will give the example of using nftables with a policy of drop on Debian 10. Here the commands would be:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input udp dport 53 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport 53 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport 22 ip saddr 10.10.0.0/24 counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <p>\n     If you are not using nftables, then make the equivalent changes for your firewall.\n    </p>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Obtain Source\n    </h3>\n    <p>\n     Download the source code for Iodine like this:\n    </p>\n    <blockquote>\n     <code>\n      apt install git -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      git clone https://github.com/yarrick/iodine.git\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Compile and Install\n    </h3>\n    <p>\n     Compile Iodine on your server like this:\n    </p>\n    <blockquote>\n     <code>\n      apt install build-essential pkg-config zlib1g-dev man-db -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cd iodine\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make install\n     </code>\n    </blockquote>\n    <p>\n     After the install, the two binaries are installed to\n     <code>\n      /usr/local/sbin/\n     </code>\n     :\n    </p>\n    <ul>\n     <li>\n      <code>\n       iodine\n      </code>\n      for the client\n     </li>\n     <li>\n      <code>\n       iodined\n      </code>\n      for the server\n     </li>\n    </ul>\n    <p>\n     You can view documentation for Iodine by issuing the command:\n    </p>\n    <blockquote>\n     <code>\n      man iodine\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Generate Password\n    </h3>\n    <p>\n     The maximum password length for Iodine is 32 characters. Generate a strong password of length 32 like with this command:\n    </p>\n    <blockquote>\n     <code>\n      openssl rand -base64 24\n     </code>\n    </blockquote>\n    <p>\n     The 24 byte length is equivalent to 32 base-64 characters. You will obtain a result that looks like this:\n    </p>\n    <blockquote>\n     <code>\n      VjhNxS2kuNO5P3QpqOpsHQSJ8Kh/zq6S\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Create Systemd Service File\n    </h3>\n    <p>\n     We will make Iodine run as a service. Create the systemd service file for\n     <code>\n      iodined\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/lib/systemd/system/iodined.service\n     </code>\n    </blockquote>\n    <p>\n     Insert contents to run the Iodine server binary like this:\n    </p>\n    <blockquote>\n     <code>\n      [Unit]\n      <br/>\n      Description=Iodine Server\n      <br/>\n      After=network.target\n      <br/>\n      <br/>\n      [Service]\n      <br/>\n      Type=simple\n      <br/>\n      ExecStart=/usr/local/sbin/iodined -f -c -P VjhNxS2kuNO5P3QpqOpsHQSJ8Kh/zq6S 10.10.0.1 x.example.com\n      <br/>\n      Restart=on-failure\n      <br/>\n      <br/>\n      [Install]\n      <br/>\n      WantedBy=multi-user.target\n     </code>\n    </blockquote>\n    <ul>\n     <li>\n      Replace\n      <code>\n       VjhNxS2kuNO5P3QpqOpsHQSJ8Kh/zq6S\n      </code>\n      by your actual password\n     </li>\n     <li>\n      Replace\n      <code>\n       10.10.0.1\n      </code>\n      by a different private address if you are using this range for something else\n     </li>\n     <li>\n      Replace\n      <code>\n       x.example.com\n      </code>\n      by your actual subdomain name\n     </li>\n    </ul>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Start Iodine\n    </h3>\n    <p>\n     Enable and start the Iodine service, so that it starts after every reboot:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable iodined\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start iodined\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-7\">\n     </a>\n     2.7. Carry Out Initial Checks\n    </h3>\n    <p>\n     Check that the service is active (running) like this:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status iodined\n     </code>\n    </blockquote>\n    <p>\n     Check that the\n     <code>\n      dns0\n     </code>\n     virtual interface exists like this:\n    </p>\n    <blockquote>\n     <code>\n      ip a\n     </code>\n    </blockquote>\n    <p>\n     Check that Iodine is listening on port 53 like this:\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep 53\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Set Up Client\n    </h2>\n    <h3>\n     <a id=\"3-1\">\n     </a>\n     3.1. Obtain Source\n    </h3>\n    <p>\n     Download the source for Iodine like this:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install git -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      git clone https://github.com/yarrick/iodine.git\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-2\">\n     </a>\n     3.2. Compile and Install\n    </h3>\n    <p>\n     Compile Iodine on your client like this:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install build-essential pkg-config zlib1g-dev man-db -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cd iodine\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      make\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo make install\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-3\">\n     </a>\n     3.3. Run\n    </h3>\n    <p>\n     Check that the Iodine binaries are in your path:\n    </p>\n    <blockquote>\n     <code>\n      echo $PATH\n     </code>\n    </blockquote>\n    <p>\n     The results should include\n     <code>\n      /usr/local/sbin\n     </code>\n     .\n    </p>\n    <p>\n     Install ifconfig:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install net-tools -y\n     </code>\n    </blockquote>\n    <p>\n     Run the Iodine client from the command line like this:\n    </p>\n    <blockquote>\n     <code>\n      sudo iodine -P VjhNxS2kuNO5P3QpqOpsHQSJ8Kh/zq6S x.example.com\n     </code>\n    </blockquote>\n    <ul>\n     <li>\n      Replace\n      <code>\n       VjhNxS2kuNO5P3QpqOpsHQSJ8Kh/zq6S\n      </code>\n      by your actual password\n     </li>\n     <li>\n      Replace\n      <code>\n       x.example.com\n      </code>\n      by your actual subdomain name\n     </li>\n    </ul>\n    <p>\n     You will see output like this:\n    </p>\n    <blockquote>\n     <code>\n      Opened dns0\n      <br/>\n      Opened IPv4 UDP socket\n      <br/>\n      Sending DNS queries for x.example.com to 192.168.1.254\n      <br/>\n      Autodetecting DNS query type (use -T to override).\n      <br/>\n      Using DNS type NULL queries\n      <br/>\n      Version ok, both using protocol v 0x00000502. You are user #0\n      <br/>\n      Setting IP of dns0 to 10.10.0.2\n      <br/>\n      Setting MTU of dns0 to 1130\n      <br/>\n      Server tunnel IP is 10.10.0.1\n      <br/>\n      Requesting server address to attempt raw UDP mode (skip with -r)\n      <br/>\n      Server is at xx.xx.xx.xx, trying raw login: (skip with -r) ....failed\n      <br/>\n      Using EDNS0 extension\n      <br/>\n      Switching upstream to codec Base128\n      <br/>\n      Server switched upstream to codec Base128\n      <br/>\n      No alternative downstream codec available, using default (Raw)\n      <br/>\n      Switching to lazy mode for low-latency\n      <br/>\n      Server switched to lazy mode\n      <br/>\n      Autoprobing max downstream fragment size... (skip with -m fragsize)\n      <br/>\n      768 ok.. 1152 ok.. ...1344 not ok.. ...1248 not ok.. ...1200 not ok.. 1176 ok.. 1188 ok.. will use 1188-2=1186\n      <br/>\n      Setting downstream fragment size to max 1186...\n      <br/>\n      Connection setup complete, transmitting data.\n      <br/>\n      Detaching from terminal...\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-4\">\n     </a>\n     3.4. Carry Out Initial Checks\n    </h3>\n    <p>\n     Check that the\n     <code>\n      dns0\n     </code>\n     virtual interface exists like this:\n    </p>\n    <blockquote>\n     <code>\n      ip a\n     </code>\n    </blockquote>\n    <p>\n     Check that you can reach your server through the tunnel like this:\n    </p>\n    <blockquote>\n     <code>\n      ping 10.10.0.1\n     </code>\n    </blockquote>\n    <p>\n     You will need to replace\n     <code>\n      10.10.0.1\n     </code>\n     by whatever IP address you chose for your server, if it was different from\n     <code>\n      10.10.0.1\n     </code>\n     .\n    </p>\n    <p>\n     Stop ping from running by pressing\n     <strong>\n      Ctrl\n     </strong>\n     +\n     <strong>\n      c\n     </strong>\n     .\n    </p>\n    <h3>\n     <a id=\"3-5\">\n     </a>\n     3.5. Set Up SSH Proxy Tunnel\n    </h3>\n    <p>\n     Iodine tunnels traffic over DNS unencrypted. Therefore we will set up an SSH tunnel within the DNS tunnel.\n    </p>\n    <p>\n     On the command line, SSH into your server through the DNS tunnel, with dynamic forwarding of port 1080 through the SSH tunnel:\n    </p>\n    <blockquote>\n     <code>\n      ssh -D 1080 root@10.10.0.1\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-6\">\n     </a>\n     3.6. Proxy Firefox\n    </h3>\n    <p>\n     On your PC, open Firefox. From the hamburger menu, select\n     <strong>\n      Preferences\n     </strong>\n     &gt;\n     <strong>\n      General\n     </strong>\n     . Scroll down to\n     <strong>\n      Network Settings\n     </strong>\n     . Click the\n     <strong>\n      Settings\n     </strong>\n     button.\n    </p>\n    <ol>\n     <li>\n      Select\n      <strong>\n       Manual proxy configuration\n      </strong>\n     </li>\n     <li>\n      Enter SOCKS Host\n      <code>\n       127.0.0.1\n      </code>\n     </li>\n     <li>\n      Enter Port\n      <code>\n       1080\n      </code>\n     </li>\n     <li>\n      Select\n      <strong>\n       SOCKS v5\n      </strong>\n     </li>\n     <li>\n      Check the box for\n      <strong>\n       Proxy DNS when using SOCKS v5\n      </strong>\n     </li>\n     <li>\n      Click\n      <strong>\n       OK\n      </strong>\n     </li>\n    </ol>\n    <h3>\n     <a id=\"3-7\">\n     </a>\n     3.7. Test End to End\n    </h3>\n    <p>\n     Check the end-to-end functionality to confirm that Iodine, SSH, and Firefox are all configured correctly. Visit\n     <a href=\"https://ipchicken.com/\" target=\"_blank\">\n      IP Chicken\n     </a>\n     . You should see the IP address of the server, not your local client.\n    </p>\n    <h2>\n     <a id=\"4\">\n     </a>\n     4. Get Help and Report Issues\n    </h2>\n    <ul>\n     <li>\n      Iodine has a detailed\n      <a href=\"https://github.com/yarrick/iodine/blob/master/README.md\" target=\"_blank\">\n       README on GitHub\n      </a>\n     </li>\n     <li>\n      There is a\n      <a href=\"https://lists.wpkg.org/mailman/listinfo/iodine-users\" target=\"_blank\">\n       mailing list for Iodine users\n      </a>\n     </li>\n     <li>\n      For genuine issues, you can post on the\n      <a href=\"https://github.com/yarrick/iodine/issues\" target=\"_blank\">\n       GitHub Issues section for Iodine\n      </a>\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2020-09\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}