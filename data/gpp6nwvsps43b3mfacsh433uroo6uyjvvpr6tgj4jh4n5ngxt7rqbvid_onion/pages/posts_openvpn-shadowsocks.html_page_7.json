{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   OpenVPN + Shadowsocks\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     OpenVPN + Shadowsocks\n    </h1>\n    <p>\n     It can be advantageous to combine OpenVPN with Shadowsocks. OpenVPN gives perfect forward secrecy, something that Shadowsocks cannot offer, since it uses a preshared key. At the same time, Shadowsocks has superior ability to evade censorship.\n    </p>\n    <p>\n     Both server and client in this article run recent versions of Debian or Ubuntu.\n    </p>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Set Up Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Choose Port for Shadowsocks\n    </h3>\n    <p>\n     On your server, choose a random port number between 10,000 and 50,000 for Shadowsocks.\n    </p>\n    <blockquote>\n     <code>\n      awk -v min=10000 -v max=50000 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'\n     </code>\n    </blockquote>\n    <p>\n     The example result that we will use in the rest of this article:\n    </p>\n    <blockquote>\n     <code>\n      16273\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Open Firewall\n    </h3>\n    <p>\n     There are multiple ways to implement a firewall: nftables, iptables, ufw, and firewalld. The modern way is nftables. However, in a moment we are going to install OpenVPN with a script that uses iptables. Therefore we will use iptables to build our basic firewall. Issue each of these commands in turn:\n    </p>\n    <blockquote>\n     <code>\n      iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -i lo -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT\n     </code>\n    </blockquote>\n    <p>\n     Open port\n     <code>\n      22\n     </code>\n     for SSH. If you can restrict the port\n     <code>\n      22\n     </code>\n     rule so that only certain source IP addresses are whitelisted for SSH access, then so much the better.\n    </p>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n     </code>\n    </blockquote>\n    <p>\n     Add rules to open the random port you chose for Shadowsocks:\n    </p>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p tcp --dport 16273 -j ACCEPT\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      iptables -A INPUT -p udp --dport 16273 -j ACCEPT\n     </code>\n    </blockquote>\n    <p>\n     Drop all unexpected input:\n    </p>\n    <blockquote>\n     <code>\n      iptables -P INPUT DROP\n     </code>\n    </blockquote>\n    <p>\n     Save the iptables rules so that they persist after reboots:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      apt install iptables-persistent -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Implement BBR\n    </h3>\n    <p>\n     Bottleneck Bandwidth and Round-trip propagation time (BBR) is a TCP congestion control algorithm developed at Google. Under certain types of network congestion, it will improve your latency. Implement BBR TCP congestion control on your server with the following commands:\n    </p>\n    <blockquote>\n     <code>\n      cat &gt;&gt; /etc/sysctl.d/50-bbr.conf &lt;&lt;EOF\n      <br/>\n      net.core.default_qdisc=fq\n      <br/>\n      net.ipv4.tcp_congestion_control=bbr\n      <br/>\n      EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sysctl -p /etc/sysctl.d/50-bbr.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Download Angristan OpenVPN Install Script\n    </h3>\n    <p>\n     Get the Angristan OpenVPN script from GitHub:\n    </p>\n    <blockquote>\n     <code>\n      wget https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh\n     </code>\n    </blockquote>\n    <p>\n     Make the script executable:\n    </p>\n    <blockquote>\n     <code>\n      chmod +x openvpn-install.sh\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-5\">\n     </a>\n     1.5. Run Script and Create Client OVPN File\n    </h3>\n    <p>\n     Run the Angristan OpenVPN script:\n    </p>\n    <blockquote>\n     <code>\n      ./openvpn-install.sh\n     </code>\n    </blockquote>\n    <p>\n     You can accept the suggested default answers to most of the questions, but Shadowsocks will require OpenVPN to use\n     <code>\n      TCP\n     </code>\n     rather than\n     <code>\n      UDP\n     </code>\n     :\n    </p>\n    <ol>\n     <li>\n      IP address should accurately reflect the IP address of your server\n     </li>\n     <li>\n      Port choice should be\n      <code>\n       1194\n      </code>\n      (it will be hidden behind Shadowsocks anyway)\n     </li>\n     <li>\n      Protocol\n      <code>\n       UDP\n      </code>\n      is fastest and should work with Shadowsocks, but some countries throttle or block\n      <code>\n       UDP\n      </code>\n      , so choose\n      <code>\n       TCP\n      </code>\n      if you need to\n     </li>\n     <li>\n      For DNS servers, you can choose your favorite, e.g. Cloudflare or Google\n     </li>\n     <li>\n      For enable compression, recommend\n      <code>\n       n\n      </code>\n      for no\n     </li>\n     <li>\n      For customized encryption settings, recommend\n      <code>\n       n\n      </code>\n      for no\n     </li>\n    </ol>\n    <p>\n     After answering all the questions, press any key to continue and run the script. At the end of the installation, you are asked about the first client:\n    </p>\n    <ol>\n     <li>\n      For the first client name, we will put\n      <code>\n       debian10\n      </code>\n     </li>\n     <li>\n      For the private key file, we will put passwordless\n     </li>\n    </ol>\n    <p>\n     You can check that OpenVPN is\n     <code>\n      active (running)\n     </code>\n     after the script finishes:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status openvpn@server\n     </code>\n    </blockquote>\n    <p>\n     Check also that OpenVPN is listening for\n     <code>\n      UDP\n     </code>\n     or\n     <code>\n      TCP\n     </code>\n     input on port\n     <code>\n      1194\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep 1194\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-6\">\n     </a>\n     1.6. Adjust Firewall Rules\n    </h3>\n    <p>\n     If you look at the iptables firewall, you will see that the script has opened port\n     <code>\n      1194\n     </code>\n     to the public:\n    </p>\n    <blockquote>\n     <code>\n      iptables -vnL\n     </code>\n    </blockquote>\n    <p>\n     We want to make the OpenVPN server as invisible as possible. Therefore we will close port\n     <code>\n      1194\n     </code>\n     to the public. In a few minutes, weâ€™ll add Shadowsocks to handle incoming traffic and pass it to OpenVPN, on the loopback interface port\n     <code>\n      1194\n     </code>\n     .\n    </p>\n    <p>\n     Edit the iptables rules that get added when OpenVPN is brought up:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/iptables/add-openvpn-rules.sh\n     </code>\n    </blockquote>\n    <p>\n     Delete the line to insert an input rule accepting packets on port\n     <code>\n      1194\n     </code>\n     . Save the file.\n    </p>\n    <p>\n     Edit the iptables rules that get removed when OpenVPN is brought down:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/iptables/rm-openvpn-rules.sh\n     </code>\n    </blockquote>\n    <p>\n     Delete the line deleting the input rule accepting packets on port\n     <code>\n      1194\n     </code>\n     . Save the file.\n    </p>\n    <p>\n     Make sure that everything still works after you reboot the server:\n    </p>\n    <blockquote>\n     <code>\n      reboot\n     </code>\n    </blockquote>\n    <p>\n     Check the revised iptables rules:\n    </p>\n    <blockquote>\n     <code>\n      iptables -vnL\n     </code>\n    </blockquote>\n    <p>\n     You should see that port\n     <code>\n      1194\n     </code>\n     is no longer open to the public. Traffic that is passed from Shadowsocks to OpenVPN will still be accepted, since it uses the loopback interface (\n     <code>\n      -i lo\n     </code>\n     ), for which we added a special iptables rule at the beginning.\n    </p>\n    <h3>\n     <a id=\"1-7\">\n     </a>\n     1.7. Install Shadowsocks\n    </h3>\n    <p>\n     Install Shadowsocks-Libev from the repositories:\n    </p>\n    <blockquote>\n     <code>\n      apt install shadowsocks-libev -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-8\">\n     </a>\n     1.8. Configure Shadowsocks\n    </h3>\n    <p>\n     Generate a strong password:\n    </p>\n    <blockquote>\n     <code>\n      openssl rand -base64 24\n     </code>\n    </blockquote>\n    <p>\n     The example result that we will use in the rest of this article:\n    </p>\n    <blockquote>\n     <code>\n      r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\n     </code>\n    </blockquote>\n    <p>\n     Edit the Shadowsocks-Libev configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/shadowsocks-libev/config.json\n     </code>\n    </blockquote>\n    <p>\n     Enter your choice of configuration details. Using our example of a random port and password:\n    </p>\n    <blockquote>\n     <code>\n      {\n      <br/>\n      \"server\":[\"::1\", \"0.0.0.0\"],\n      <br/>\n      \"mode\":\"tcp_and_udp\",\n      <br/>\n      \"server_port\":16273,\n      <br/>\n      \"local_port\":1080,\n      <br/>\n      \"password\":\"r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\",\n      <br/>\n      \"timeout\":300,\n      <br/>\n      \"method\":\"chacha20-ietf-poly1305\"\n      <br/>\n      }\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"1-9\">\n     </a>\n     1.9. Restart Shadowsocks\n    </h3>\n    <p>\n     Restart Shadowsocks-Libev, check that it is working, then exit your session with the server:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart shadowsocks-libev\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl status shadowsocks-libev\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      ss -tulpn | grep ss-server\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      exit\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Set Up Client\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Copy Client Configuratio File from Server to PC\n    </h3>\n    <p>\n     Now work on your PC. Assuming that your server has IP address\n     <code>\n      yy.yy.yy.yy\n     </code>\n     and that you named the client file\n     <code>\n      debian10.ovpn\n     </code>\n     , copy the OVPN file down from the server to the client like this:\n    </p>\n    <blockquote>\n     <code>\n      scp root@yy.yy.yy.yy:debian10.ovpn ~/Downloads/debian10.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Install Shadowsocks Client\n    </h3>\n    <p>\n     Install Shadowsocks-Libev from the repositories:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt update &amp;&amp; sudo apt upgrade -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo apt install shadowsocks-libev -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Configure Shadowsocks Client\n    </h3>\n    <blockquote>\n     <code>\n      sudo systemctl stop shadowsocks-libev\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo systemctl disable shadowsocks-libev\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo vi /etc/shadowsocks-libev/config.json\n     </code>\n    </blockquote>\n    <p>\n     Enter your server details, replacing\n     <code>\n      yy.yy.yy.yy\n     </code>\n     by your serverâ€™s public IP address. The port, password, and encryption method must match those on the server.\n    </p>\n    <blockquote>\n     <code>\n      {\n      <br/>\n      \"server\": \"yy.yy.yy.yy\",\n      <br/>\n      \"server_port\": 16273,\n      <br/>\n      \"local_address\": \"127.0.0.1\",\n      <br/>\n      \"local_port\":1080,\n      <br/>\n      \"password\": \"r7EaFR2DshpQT+QMfQGYO5BXC2BAV8JG\",\n      <br/>\n      \"method\": \"chacha20-ietf-poly1305\",\n      <br/>\n      \"timeout\": 300,\n      <br/>\n      \"fast_open\": false,\n      <br/>\n      \"mode\": \"tcp_and_udp\"\n      <br/>\n      }\n     </code>\n    </blockquote>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4. Start Shadowsocks\n    </h3>\n    <p>\n     Start the local client listening on port\n     <code>\n      1080\n     </code>\n     :\n    </p>\n    <blockquote>\n     <code>\n      sudo systemctl enable shadowsocks-libev-local@config\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo systemctl start shadowsocks-libev-local@config\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo ss -tulpn | grep 1080\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-5\">\n     </a>\n     2.5. Install OpenVPN Client\n    </h3>\n    <p>\n     Install OpenVPN for GNOME and all its dependencies from the repositories:\n    </p>\n    <blockquote>\n     <code>\n      sudo apt install network-manager-openvpn-gnome -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-6\">\n     </a>\n     2.6. Configure OpenVPN Client\n    </h3>\n    <p>\n     Edit the downloaded OpenVPN client configuration file:\n    </p>\n    <blockquote>\n     <code>\n      vi ~/Downloads/debian10.conf\n     </code>\n    </blockquote>\n    <p>\n     Add a line at the end:\n    </p>\n    <blockquote>\n     <code>\n      socks-proxy 127.0.0.1 1080\n     </code>\n    </blockquote>\n    <p>\n     Save the file. You can now also close your terminal.\n    </p>\n    <p>\n     From GNOME Settings, go to the\n     <strong>\n      Network\n     </strong>\n     page.\n    </p>\n    <ol>\n     <li>\n      Click the plus sign to add a VPN\n     </li>\n     <li>\n      Select the option\n      <strong>\n       Import from file...\n      </strong>\n     </li>\n     <li>\n      Select your downloaded\n      <code>\n       ~/Downloads/debian10.conf\n      </code>\n      file\n     </li>\n     <li>\n      Click\n      <strong>\n       Add\n      </strong>\n     </li>\n    </ol>\n    <h3>\n     <a id=\"2-7\">\n     </a>\n     2.7. Add Static Route to Server\n    </h3>\n    <p>\n     With OpenVPN and Shadowsocks running at the same time, we must prevent a routing loop. We do not want traffic for the OpenVPN server to go to the OpenVPN client, then to the Shadowsocks client, and then back to the OpenVPN client again.\n    </p>\n    <p>\n     On Windows, you can add\n     <code>\n      route yy.yy.yy.yy 255.255.255.255 net_gateway\n     </code>\n     to the OpenVPN client configuration. This does not work on a Linux client running Network Manager due to\n     <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1417169\" target=\"_blank\">\n      #1417169\n     </a>\n     . Network Manager for OpenVPN does not support special\n     <code>\n      route\n     </code>\n     keywords such as\n     <code>\n      vpn_gateway\n     </code>\n     or\n     <code>\n      net_gateway\n     </code>\n     .\n    </p>\n    <p>\n     Therefore on a Linux client, we will add a static route at this stage.\n    </p>\n    <p>\n     Determine your default gateway:\n    </p>\n    <blockquote>\n     <code>\n      ip route | grep default\n     </code>\n    </blockquote>\n    <p>\n     Letâ€™s say, for example, that your OpenVPN server is\n     <code>\n      yy.yy.yy.yy\n     </code>\n     , your default gateway is\n     <code>\n      192.168.1.254\n     </code>\n     , and your real interface is\n     <code>\n      enp0s3\n     </code>\n     . Add a temporary static route:\n    </p>\n    <blockquote>\n     <code>\n      sudo ip route add yy.yy.yy.yy via 192.168.1.254 dev enp0s3\n     </code>\n    </blockquote>\n    <p>\n     The route will persist until the next reboot (or until you explicitly delete the route).\n    </p>\n    <h3>\n     <a id=\"2-8\">\n     </a>\n     2.8. Test End-to-End\n    </h3>\n    <p>\n     In GNOME Network Settings, toggle your newly added VPN connection to the ON position.\n    </p>\n    <p>\n     Open Firefox, and visit\n     <a href=\"https://ipchicken.com\" target=\"_blank\">\n      IP Chicken\n     </a>\n     .\n    </p>\n    <p>\n     You should see the IP address of your remote server, not your local client.\n    </p>\n    <h2>\n     <a id=\"5\">\n     </a>\n     3. Get Help and Report Issues\n    </h2>\n    <ul>\n     <li>\n      For OpenVPN questions, post in the\n      <a href=\"https://forums.openvpn.net\" target=\"_blank\">\n       OpenVPN forum\n      </a>\n     </li>\n     <li>\n      For Shadowsocks-Libev issues, see\n      <a href=\"https://github.com/shadowsocks/shadowsocks-libev/issues\" target=\"_blank\">\n       GitHub\n      </a>\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2020-09\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}