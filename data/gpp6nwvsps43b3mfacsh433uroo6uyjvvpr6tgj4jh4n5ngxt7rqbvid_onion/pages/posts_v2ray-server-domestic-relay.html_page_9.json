{
    "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n <head>\n  <meta charset=\"utf-8\"/>\n  <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\"/>\n  <title>\n   V2Ray Server with Domestic Relay\n  </title>\n  <link href=\"../general.css\" rel=\"stylesheet\" type=\"text/css\"/>\n </head>\n <body>\n  <div id=\"header\">\n   <div class=\"content\">\n    <h2>\n     <a href=\"/\">\n      Oil and Fish\n     </a>\n    </h2>\n   </div>\n  </div>\n  <div id=\"main\">\n   <div class=\"content\">\n    <h1>\n     V2Ray Server with Domestic Relay\n    </h1>\n    <p>\n     In this article, we forward traffic to a foreign V2Ray server via a domestic relay server. This configuration has two potential advantages:\n    </p>\n    <ul>\n     <li>\n      Speed\n     </li>\n     <li>\n      Overcoming censorship\n     </li>\n    </ul>\n    <p>\n     An example of speed would be China. Due to congestion, it can be more efficient to have a domestic relay in Shenzhen and a V2Ray server in Hong Kong.\n    </p>\n    <p>\n     An example of overcoming censorship would be Iran during the shutdown of November 2019. It was discovered you could still connect to the Internet if you used a relay in a domestic data center.\n    </p>\n    <p>\n     For the best ability to overcome censorship, we will implement the V2Ray server as V2Ray + WebSocket + TLS. The camouflage website on the same server will run on Nginx.\n    </p>\n    <p>\n     For the relay server, we will use a minimal configuration of Go Simple Tunnel (Gost).\n    </p>\n    <p>\n     In the examples in this article, we use these placeholders for IP addresses:\n    </p>\n    <ul>\n     <li>\n      Your local PC has IP address\n      <code>\n       xx.xx.xx.xx\n      </code>\n     </li>\n     <li>\n      The domestic relay has IP address\n      <code>\n       yy.yy.yy.yy\n      </code>\n     </li>\n     <li>\n      The foreign V2Ray server has hostname\n      <code>\n       zzz.yyyyy.xyz\n      </code>\n      and IP address\n      <code>\n       zz.zz.zz.zz\n      </code>\n     </li>\n    </ul>\n    <p>\n     We give instructions for both CentOS 8 and Debian 10 servers. Fedora and RHEL will be similar to CentOS 8, and Ubuntu and derivatives will be similar to Debian 10.\n    </p>\n    <img alt=\"Local V2Ray client PC, domestic Gost relay, and foreign V2Ray server\" src=\"../images/v2ray-gost.png\"/>\n    <h2>\n     <a id=\"1\">\n     </a>\n     1. Prepare V2Ray Server\n    </h2>\n    <h3>\n     <a id=\"1-1\">\n     </a>\n     1.1. Obtain VPS and Domain Name\n    </h3>\n    <p>\n     Obtain a VPS. In the rest of this article, we will write its IP address as\n     <code>\n      zz.zz.zz.zz\n     </code>\n     .\n    </p>\n    <p>\n     Obtain a domain name. We will give\n     <code>\n      yyyyy.xyz\n     </code>\n     as our example domain name,\n     <code>\n      and zzz.yyyyy.xyz\n     </code>\n     as our example host name for the V2Ray server.\n    </p>\n    <p>\n     Create a DNS\n     <code>\n      A\n     </code>\n     record pointing from hostname\n     <code>\n      zzz.yyyyy.xyz\n     </code>\n     to the server IP address\n     <code>\n      zz.zz.zz.zz\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"1-2\">\n     </a>\n     1.2. Update Server\n    </h3>\n    <p>\n     Update your server. On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      yum update -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian 10:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-3\">\n     </a>\n     1.3. Open Firewall\n    </h3>\n    <p>\n     If you have implemented a firewall on your server, you must open port\n     <code>\n      80\n     </code>\n     and port\n     <code>\n      443\n     </code>\n     . On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      firewall-cmd --permanent --zone=public --add-service=http\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --permanent --zone=public --add-service=https\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --reload\n     </code>\n    </blockquote>\n    <p>\n     Debian 10:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport {http, https} counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"1-4\">\n     </a>\n     1.4. Implement BBR TCP Congestion Control\n    </h3>\n    <p>\n     Bottleneck Bandwidth and Round-trip propagation time (BBR) is a TCP congestion control algorithm developed at Google. Under certain types of congestion, it will improve your latency.\n    </p>\n    <blockquote>\n     <code>\n      cat &gt;&gt; /etc/sysctl.d/50-bbr.conf &lt;&lt;EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      net.core.default_qdisc=fq\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      net.ipv4.tcp_congestion_control=bbr\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sysctl -p /etc/sysctl.d/50-bbr.conf\n     </code>\n    </blockquote>\n    <h2>\n     <a id=\"2\">\n     </a>\n     2. Install and Configure V2Ray on Server\n    </h2>\n    <h3>\n     <a id=\"2-1\">\n     </a>\n     2.1. Download and Install V2Ray\n    </h3>\n    Download and run the V2Ray installation script. On CentOS 8:\n    <blockquote>\n     <code>\n      yum install wget -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      bash install-release.sh\n     </code>\n    </blockquote>\n    One Debian 10:\n    <blockquote>\n     <code>\n      apt install wget -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      bash install-release.sh\n     </code>\n    </blockquote>\n    <p>\n     The script ends its run with a messages such as\n     <code>\n      V2Ray v4.27.0 is installed\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"2-2\">\n     </a>\n     2.2. Configure V2Ray\n    </h3>\n    <p>\n     Edit the V2Ray configuration file.\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/local/etc/v2ray/config.json\n     </code>\n    </blockquote>\n    <p>\n     Insert the template below for V2Ray + WebSocket + TLS. The TLS part will be handled by Nginx, which we will set up in the next section.\n    </p>\n    <ul>\n     <li>\n      Replace\n      <code>\n       b5cdf5f5-7ef3-40a0-8c78-b66357f1a386\n      </code>\n      by your choice for UUID.\n     </li>\n     <li>\n      Replace\n      <code>\n       64\n      </code>\n      by your choice for alterId.\n     </li>\n     <li>\n      Replace\n      <code>\n       /secret12\n      </code>\n      by your choice of secret path for V2Ray.\n     </li>\n    </ul>\n    <pre>\n{\n  \"log\": {\n    \"loglevel\": \"warning\",\n    \"access\": \"/var/log/v2ray/access.log\", \n    \"error\": \"/var/log/v2ray/error.log\"\n  },\n  \"inbounds\": [{\n    \"listen\" : \"127.0.0.1\",\n    \"port\": 10000,\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"clients\": [\n        {\n          \"id\": \"b5cdf5f5-7ef3-40a0-8c78-b66357f1a386\",\n          \"level\": 1,\n          \"alterId\": 64\n        }\n      ]\n    },\n    \"streamSettings\": {\n      \"network\": \"ws\",\n      \"wsSettings\": {\n        \"path\": \"/secret12\"\n      }\n    }\n  }],\n  \"outbounds\": [{\n    \"protocol\": \"freedom\",\n    \"settings\": {}\n  },{\n    \"protocol\": \"blackhole\",\n    \"settings\": {},\n    \"tag\": \"blocked\"\n  }],\n  \"routing\": {\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"ip\": [\"geoip:private\"],\n        \"outboundTag\": \"blocked\"\n      }\n    ]\n  }\n}\n</pre>\n    <h3>\n     <a id=\"2-3\">\n     </a>\n     2.3. Start V2Ray\n    </h3>\n    <blockquote>\n     <code>\n      systemctl enable v2ray\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start v2ray\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"2-4\">\n     </a>\n     2.4 Check V2Ray\n    </h3>\n    <p>\n     Issue the command below:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status v2ray\n     </code>\n    </blockquote>\n    <p>\n     It should show\n     <code>\n      active (running)\n     </code>\n     .\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep v2ray\n     </code>\n    </blockquote>\n    <p>\n     The above should show V2Ray listening on\n     <code>\n      127.0.0.1\n     </code>\n     port\n     <code>\n      10000\n     </code>\n     .\n    </p>\n    <blockquote>\n     <code>\n      journalctl -u v2ray\n     </code>\n    </blockquote>\n    <p>\n     The above command shows the most recent messages from V2Ray. This could be useful if there are errors.\n    </p>\n    <h2>\n     <a id=\"3\">\n     </a>\n     3. Install and Configure Nginx on V2Ray Server\n    </h2>\n    <h3>\n     <a id=\"3-1\">\n     </a>\n     3.1. Install Nginx\n    </h3>\n    <p>\n     Install the Nginx web server. On CentOS:\n    </p>\n    <blockquote>\n     <code>\n      yum install nginx -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl enable nginx\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start nginx\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      apt install nginx -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-2\">\n     </a>\n     3.2. Configure Nginx\n    </h3>\n    <p>\n     On CentOS, edit\n     <code>\n      /etc/nginx/nginx.conf\n     </code>\n     . On Debian, edit\n     <code>\n      /etc/nginx/sites-available/default\n     </code>\n     .\n    </p>\n    <p>\n     Change the line\n     <code>\n      server_name _;\n     </code>\n     to your actual server name. For example:\n    </p>\n    <blockquote>\n     <code>\n      server_name zzz.yyyyy.xyz;\n     </code>\n    </blockquote>\n    <p>\n     Add a new\n     <code>\n      location\n     </code>\n     block. Replace\n     <code>\n      /secret12\n     </code>\n     by your choice of secret path for V2Ray.\n    </p>\n    <blockquote>\n     <code>\n      location /secret12 {\n      <br/>\n      proxy_redirect off;\n      <br/>\n      proxy_pass http://127.0.0.1:10000;\n      <br/>\n      proxy_http_version 1.1;\n      <br/>\n      proxy_set_header Upgrade $http_upgrade;\n      <br/>\n      proxy_set_header Connection \"upgrade\";\n      <br/>\n      proxy_set_header Host $http_host;\n      <br/>\n      # Show real IP if you enable V2Ray access log\n      <br/>\n      proxy_set_header X-Real-IP $remote_addr;\n      <br/>\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      <br/>\n      }\n     </code>\n    </blockquote>\n    <p>\n     After you have finished editing, save the file, then issue the command:\n    </p>\n    <blockquote>\n     <code>\n      systemctl restart nginx\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-3\">\n     </a>\n     3.3. Enable Network Connect in SELinux\n    </h3>\n    <p>\n     On CentOS only, due to SELinux, you must issue the following command to allow Nginx to make network connections:\n    </p>\n    <blockquote>\n     <code>\n      setsebool -P httpd_can_network_connect 1\n     </code>\n    </blockquote>\n    <p>\n     This does not apply to Debian, which typically does not use SELinux.\n    </p>\n    <h3>\n     <a id=\"3-4\">\n     </a>\n     3.4. Add Web Content\n    </h3>\n    <p>\n     Add some realistic website content so that even manual inspection will make your server look like a web server. You can search for sample web templates from the Internet. Here is one example. On CentOS:\n    </p>\n    <blockquote>\n     <code>\n      yum install zip unzip -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://github.com/arcdetri/sample-blog/archive/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      cp -rf sample-blog-master/html/* /usr/share/nginx/html/\n     </code>\n    </blockquote>\n    <p>\n     On Debian or Ubuntu:\n    </p>\n    <blockquote>\n     <code>\n      apt install zip unzip -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      wget https://github.com/arcdetri/sample-blog/archive/master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      unzip master.zip\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sudo cp -rf sample-blog-master/html/* /var/www/html/\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-5\">\n     </a>\n     3.5. Check DNS Resolution\n    </h3>\n    <p>\n     On your PC, issue the command:\n    </p>\n    <blockquote>\n     <code>\n      nslookup zzz.yyyyy.xyz\n     </code>\n    </blockquote>\n    <p>\n     This should resolve to your V2Ray server IP address, which we are giving as\n     <code>\n      zz.zz.zz.zz\n     </code>\n     in our examples. If it does not resolve yet, just wait until it does resolve before you go any further.\n    </p>\n    <p>\n     You should also be able to open a browser, visit the HTTP version of your website, and see the sample content:\n    </p>\n    <blockquote>\n     <code>\n      http://zzz.yyyyy.xyz\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-6\">\n     </a>\n     3.6. Get SSL Certificate\n    </h3>\n    <p>\n     Add a free Let’s Encrypt SSL certificate to your site. For CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      yum install epel-release -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      yum install certbot python3-certbot-nginx -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      certbot --nginx --register-unsafely-without-email\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      echo \"0 0,12 * * * root python3 -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q\" | sudo tee -a /etc/crontab &gt; /dev/null\n     </code>\n    </blockquote>\n    <p>\n     And for Debian 10:\n    </p>\n    <blockquote>\n     <code>\n      apt install certbot python-certbot-nginx -y\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      certbot --nginx --register-unsafely-without-email\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      certbot renew --dry-run\n     </code>\n    </blockquote>\n    <p>\n     Now you have a working web server with sample content and an SSL certificate.\n    </p>\n    <h3>\n     <a id=\"3-7\">\n     </a>\n     3.7. Add HTTP/2\n    </h3>\n    <p>\n     HTTP/2 can improve performance by decreasing latency.\n    </p>\n    <p>\n     Edit your configuration. On CentOS, edit\n     <code>\n      /etc/nginx/nginx.conf\n     </code>\n     . On Debian, edit\n     <code>\n      /etc/nginx/sites-available/default\n     </code>\n     . Add HTTP/2 to the\n     <code>\n      listen\n     </code>\n     line(s), like this:\n    </p>\n    <blockquote>\n     <code>\n      listen [::]:443 ssl http2 ipv6only=on; # managed by Certbot\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      listen 443 ssl http2; # managed by Certbot\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Test your configuration and restart Nginx:\n    </p>\n    <blockquote>\n     <code>\n      nginx -t\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl restart nginx\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"3-8\">\n     </a>\n     3.8. Optionally Add CDN\n    </h3>\n    <p>\n     Optionally position your server behind a Content Delivery Network by adding it to a CDN service such as Cloudflare.\n    </p>\n    <h3>\n     <a id=\"3-9\">\n     </a>\n     3.9. Optionally Test Server Alone\n    </h3>\n    <p>\n     Test what a casual visitor sees when they visit the HTTPS version of your website:\n    </p>\n    <blockquote>\n     <code>\n      https://zzz.yyyyy.xyz\n     </code>\n    </blockquote>\n    <p>\n     If your censorship situation allows it, and there is no risk of your V2Ray server being blocked, you can install a V2Ray client on your PC and test a direct connection from client to server, without the domestic relay which we will add next.\n    </p>\n    <h2>\n     <a id=\"4\">\n     </a>\n     4. Install Gost on Relay Server\n    </h2>\n    <p>\n     Now obtain a second VPS to serve as your domestic relay server. It must be in a domestic data center. We give\n     <code>\n      yy.yy.yy.yy\n     </code>\n     as its IP address. The relay server does not necessarily need a DNS record.\n    </p>\n    <p>\n     We will use a simple configuration of Gost to forward requests from the domestic relay at\n     <code>\n      yy.yy.yy.yy\n     </code>\n     to the foreign V2Ray server at\n     <code>\n      zz.zz.zz.zz\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"4-1\">\n     </a>\n     4.1. Update Server\n    </h3>\n    <p>\n     In the same way as you did on your V2Ray server, update the existing software packages on your relay server. On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      yum update -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian 10:\n    </p>\n    <blockquote>\n     <code>\n      apt update &amp;&amp; apt upgrade -y\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-2\">\n     </a>\n     4.2. Open Firewall\n    </h3>\n    <p>\n     If you implemented a firewall on the relay server, open port 443. On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      firewall-cmd --permanent --zone=public --add-service=https\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      firewall-cmd --reload\n     </code>\n    </blockquote>\n    <p>\n     Debian 10:\n    </p>\n    <blockquote>\n     <code>\n      nft add rule inet filter input tcp dport https counter accept\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      nft list ruleset &gt; /etc/nftables.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-3\">\n     </a>\n     4.3. Implement BBR TCP Congestion Control\n    </h3>\n    <p>\n     As on the main server, implement BBR congestion control:\n    </p>\n    <blockquote>\n     <code>\n      cat &gt;&gt; /etc/sysctl.d/50-bbr.conf &lt;&lt;EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      net.core.default_qdisc=fq\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      net.ipv4.tcp_congestion_control=bbr\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      EOF\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      sysctl -p /etc/sysctl.d/50-bbr.conf\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-4\">\n     </a>\n     4.4. Download Gost\n    </h3>\n    <p>\n     Install wget. On CentOS 8:\n    </p>\n    <blockquote>\n     <code>\n      yum install wget gzip -y\n     </code>\n    </blockquote>\n    <p>\n     On Debian 10:\n    </p>\n    <blockquote>\n     <code>\n      apt install wget -y\n     </code>\n    </blockquote>\n    <p>\n     Open a browser on your PC, and look on\n     <a href=\"https://github.com/ginuerzh/gost/releases\" target=\"_blank\">\n      GitHub\n     </a>\n     to see the latest version of Gost. We will use the example of\n     <code>\n      v2.11.1\n     </code>\n     . Change this to the latest version at the time you follow this tutorial.\n    </p>\n    <p>\n     On your relay server, issue the commands:\n    </p>\n    <blockquote>\n     <code>\n      wget https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      gunzip gost-linux-amd64-2.11.1.gz\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      mv gost-linux-amd64-2.11.1 /usr/local/bin/gost\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      chmod +x /usr/local/bin/gost\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-5\">\n     </a>\n     4.5. Create Systemd Service File\n    </h3>\n    <p>\n     Edit the systemd service file for Gost:\n    </p>\n    <blockquote>\n     <code>\n      vi /usr/lib/systemd/system/gost.service\n     </code>\n    </blockquote>\n    <p>\n     Insert the contents below. Replace\n     <code>\n      zz.zz.zz.zz\n     </code>\n     in the sample contents by your actual V2Ray server IP address:\n    </p>\n    <blockquote>\n     <code>\n      [Unit]\n      <br/>\n      Description=GO Simple Tunnel\n      <br/>\n      After=network.target\n      <br/>\n      Wants=network.target\n      <br/>\n      <br/>\n      [Service]\n      <br/>\n      Type=simple\n      <br/>\n      ExecStart=/usr/local/bin/gost -L=tcp://:443/zz.zz.zz.zz:443\n      <br/>\n      <br/>\n      [Install]\n      <br/>\n      WantedBy=multi-user.target\n     </code>\n    </blockquote>\n    <p>\n     This says to forward TCP input on local (\n     <code>\n      -L\n     </code>\n     ) port\n     <code>\n      443\n     </code>\n     to remote IP address\n     <code>\n      zz.zz.zz.zz\n     </code>\n     port\n     <code>\n      443\n     </code>\n     .\n    </p>\n    <p>\n     Save the file.\n    </p>\n    <h3>\n     <a id=\"4-6\">\n     </a>\n     4.6. Disable SELinux\n    </h3>\n    <p>\n     This is only for CentOS. Running as is gives exit code 203. The easiest way to solve this is to edit the\n     <code>\n      /etc/selinux/config\n     </code>\n     file:\n    </p>\n    <blockquote>\n     <code>\n      vi /etc/selinux/config\n     </code>\n    </blockquote>\n    <p>\n     Set the line for SELinux status to disabled:\n    </p>\n    <blockquote>\n     <code>\n      SELINUX=disabled\n     </code>\n    </blockquote>\n    <p>\n     Save the file. Reboot the server:\n    </p>\n    <blockquote>\n     <code>\n      reboot\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-7\">\n     </a>\n     4.7. Start Gost\n    </h3>\n    <p>\n     Issue the commands:\n    </p>\n    <blockquote>\n     <code>\n      systemctl enable gost\n     </code>\n    </blockquote>\n    <blockquote>\n     <code>\n      systemctl start gost\n     </code>\n    </blockquote>\n    <h3>\n     <a id=\"4-8\">\n     </a>\n     4.8. Check Gost\n    </h3>\n    <p>\n     Issue the command:\n    </p>\n    <blockquote>\n     <code>\n      systemctl status gost\n     </code>\n    </blockquote>\n    <p>\n     It should show\n     <code>\n      active (running)\n     </code>\n     .\n    </p>\n    <blockquote>\n     <code>\n      ss -tulpn | grep gost\n     </code>\n    </blockquote>\n    <p>\n     This should show Gost listening on port\n     <code>\n      443\n     </code>\n     .\n    </p>\n    <blockquote>\n     <code>\n      journalctl -u gost\n     </code>\n    </blockquote>\n    <p>\n     The above command shows the most recent messages from Gost.\n    </p>\n    <h2>\n     <a id=\"5\">\n     </a>\n     5. Install Client\n    </h2>\n    <p>\n     The procedure for installing a V2Ray client is the same as in the post\n     <a href=\"v2ray.html#2\">\n      How to Install, Configure, and Run V2Ray + WebSocket + TLS + CDN\n     </a>\n     . We will not repeat all the details here.\n    </p>\n    <h3>\n     <a id=\"5-1\">\n     </a>\n     5.1. Download and Install V2Ray Client\n    </h3>\n    <p>\n     We will just give the example of a Linux client, and even then only a brief overview. Assuming you want Linux, download the latest Linux client from\n     <a href=\"https://github.com/v2ray/v2ray-core/releases\" target=\"_blank\">\n      GitHub\n     </a>\n     . Unzip\n     <code>\n      v2ray-linux-64.zip\n     </code>\n     .\n    </p>\n    <h3>\n     <a id=\"5-2\">\n     </a>\n     5.2. Configure Client\n    </h3>\n    <p>\n     This the same as in the main post\n     <a href=\"v2ray.html#2\">\n      How to Install, Configure, and Run V2Ray + WebSocket + TLS + CDN\n     </a>\n     , except that you must put the\n     <em>\n      relay\n     </em>\n     server IP address (\n     <code>\n      yy.yy.yy.yy\n     </code>\n     in our example) in place of the V2Ray server IP address (\n     <code>\n      zz.zz.zz.zz\n     </code>\n     in our example).\n    </p>\n    <p>\n     Continuing our example for Linux, edit the V2Ray configuration file,\n     <code>\n      config.json\n     </code>\n     :\n    </p>\n    <ul>\n     <li>\n      Replace\n      <code>\n       yy.yy.yy.yy\n      </code>\n      by your actual\n      <em>\n       relay\n      </em>\n      server IP address.\n     </li>\n     <li>\n      Replace\n      <code>\n       b5cdf5f5-7ef3-40a0-8c78-b66357f1a386\n      </code>\n      by your choice for UUID.\n     </li>\n     <li>\n      Repalce\n      <code>\n       64\n      </code>\n      by your choice for alterId.\n     </li>\n     <li>\n      Replace\n      <code>\n       /secret12\n      </code>\n      by your choice of secret path for V2Ray.\n     </li>\n     <li>\n      Replace\n      <code>\n       zzz.yyyyy.xyz\n      </code>\n      by your actual\n      <em>\n       V2Ray\n      </em>\n      server host name.\n     </li>\n    </ul>\n    <pre>\n{\n  \"inbounds\": [\n    {\n      \"port\": 1080,\n      \"listen\": \"127.0.0.1\",\n      \"protocol\": \"socks\",\n      \"sniffing\": {\n        \"enabled\": true,\n        \"destOverride\": [\"http\", \"tls\"]\n      },\n      \"settings\": {\n        \"auth\": \"noauth\",\n        \"udp\": false\n      }\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"protocol\": \"vmess\",\n      \"settings\": {\n        \"vnext\": [\n          {\n            \"address\": \"yy.yy.yy.yy\",\n            \"port\": 443,\n            \"users\": [\n              {\n                \"id\": \"b5cdf5f5-7ef3-40a0-8c78-b66357f1a386\",\n                \"alterId\": 64\n              }\n            ]\n          }\n        ]\n      },\n      \"streamSettings\": {\n        \"network\": \"ws\",\n        \"security\": \"tls\",\n        \"tlsSettings\": {\n          \"serverName\": \"zzz.yyyyy.xyz\",\n          \"allowInsecure\": false\n        },\n        \"wsSettings\": {\n          \"path\": \"/secret12\",\n          \"headers\" : {\n            \"host\": \"zzz.yyyyy.xyz\"\n          }\n        }\n      }\n    }\n  ]\n}\n</pre>\n    <h3>\n     <a id=\"5-3\">\n     </a>\n     5.3. Run Client\n    </h3>\n    <p>\n     Continuing our example of a Linux client, you would change into the folder with the V2Ray binary in it and issue the command:\n    </p>\n    <blockquote>\n     <code>\n      ./v2ray -config=config.json\n     </code>\n    </blockquote>\n    <p>\n     Then open Firefox. From the hamburger menu, select\n     <strong>\n      Preferences\n     </strong>\n     . In the\n     <strong>\n      Network Settings\n     </strong>\n     section, click\n     <strong>\n      Settings\n     </strong>\n     . Set the network settings as follows:\n    </p>\n    <ul>\n     <li>\n      Select\n      <strong>\n       Manual proxy configuration.\n      </strong>\n     </li>\n     <li>\n      Fill in\n      <code>\n       127.0.0.1\n      </code>\n      in SOCKS Host.\n     </li>\n     <li>\n      Fill in\n      <code>\n       1080\n      </code>\n      in the Port.\n     </li>\n     <li>\n      Select\n      <strong>\n       SOCKS v5.\n      </strong>\n     </li>\n     <li>\n      Check\n      <strong>\n       Proxy DNS when using SOCKS v5.\n      </strong>\n     </li>\n    </ul>\n    <p>\n     Firefox now sends requests to the local V2Ray client, which sends them to the domestic relay server, which forwards them to the foreign V2Ray server.\n    </p>\n    <h3>\n     <a id=\"5-4\">\n     </a>\n     5.4. Check Client\n    </h3>\n    <p>\n     In your browser, visit\n     <a href=\"https://ipchicken.com\" target=\"_blank\">\n      IP Chicken\n     </a>\n     .\n    </p>\n    <p>\n     You should see the IP address of your foreign V2Ray server (\n     <code>\n      zz.zz.zz.zz\n     </code>\n     in our example),\n     <em>\n      not\n     </em>\n     the IP address of your PC (\n     <code>\n      xx.xx.xx.xx\n     </code>\n     ) or the domestic relay server (\n     <code>\n      yy.yy.yy.yy\n     </code>\n     ).\n    </p>\n    <h2>\n     <a id=\"6\">\n     </a>\n     6. Get Help and Report Issues\n    </h2>\n    <p>\n     You can ask informal questions on social media sites such as\n     <a href=\"https://www.reddit.com/r/dumbclub\" target=\"_blank\">\n      Reddit\n     </a>\n     . Raise formal issues in the\n     <strong>\n      Issues\n     </strong>\n     section of the appropriate repository on GitHub:\n    </p>\n    <ul>\n     <li>\n      <a href=\"https://github.com/v2ray/v2ray-core/issues\" target=\"_blank\">\n       V2Ray\n      </a>\n     </li>\n     <li>\n      <a href=\"https://github.com/ginuerzh/gost/issues\" target=\"_blank\">\n       Gost\n      </a>\n     </li>\n    </ul>\n    <p>\n     <em>\n      Updated 2020-08\n     </em>\n    </p>\n   </div>\n  </div>\n  <div id=\"footer\">\n   <div class=\"content\">\n    <p>\n     This site is provided for information only. It cannot replace the advice of a trained security professional. If lives or safety depend on your security, please seek the advice of an expert.\n    </p>\n   </div>\n  </div>\n </body>\n</html>\n"
}